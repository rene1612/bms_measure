
bms-measure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005310  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800541c  0800541c  0001541c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005444  08005444  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005444  08005444  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005444  08005444  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005444  08005444  00015444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005448  08005448  00015448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800544c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000070  080054bc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  080054bc  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108a1  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df9  00000000  00000000  0003093a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00033738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e00  00000000  00000000  000346a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a39e  00000000  00000000  000354a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000125e1  00000000  00000000  0004f83e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094046  00000000  00000000  00061e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f5e65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004100  00000000  00000000  000f5eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005404 	.word	0x08005404

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005404 	.word	0x08005404

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	; 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80004d4:	4b31      	ldr	r3, [pc, #196]	; (800059c <MX_CAN_Init+0xcc>)
 80004d6:	4a32      	ldr	r2, [pc, #200]	; (80005a0 <MX_CAN_Init+0xd0>)
 80004d8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80004da:	4b30      	ldr	r3, [pc, #192]	; (800059c <MX_CAN_Init+0xcc>)
 80004dc:	2212      	movs	r2, #18
 80004de:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004e0:	4b2e      	ldr	r3, [pc, #184]	; (800059c <MX_CAN_Init+0xcc>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004e6:	4b2d      	ldr	r3, [pc, #180]	; (800059c <MX_CAN_Init+0xcc>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80004ec:	4b2b      	ldr	r3, [pc, #172]	; (800059c <MX_CAN_Init+0xcc>)
 80004ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80004f2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80004f4:	4b29      	ldr	r3, [pc, #164]	; (800059c <MX_CAN_Init+0xcc>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004fa:	4b28      	ldr	r3, [pc, #160]	; (800059c <MX_CAN_Init+0xcc>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000500:	4b26      	ldr	r3, [pc, #152]	; (800059c <MX_CAN_Init+0xcc>)
 8000502:	2200      	movs	r2, #0
 8000504:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000506:	4b25      	ldr	r3, [pc, #148]	; (800059c <MX_CAN_Init+0xcc>)
 8000508:	2200      	movs	r2, #0
 800050a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800050c:	4b23      	ldr	r3, [pc, #140]	; (800059c <MX_CAN_Init+0xcc>)
 800050e:	2200      	movs	r2, #0
 8000510:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000512:	4b22      	ldr	r3, [pc, #136]	; (800059c <MX_CAN_Init+0xcc>)
 8000514:	2200      	movs	r2, #0
 8000516:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000518:	4b20      	ldr	r3, [pc, #128]	; (800059c <MX_CAN_Init+0xcc>)
 800051a:	2200      	movs	r2, #0
 800051c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800051e:	481f      	ldr	r0, [pc, #124]	; (800059c <MX_CAN_Init+0xcc>)
 8000520:	f001 fe26 	bl	8002170 <HAL_CAN_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800052a:	f000 fbe9 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  can_task_scheduler = PROCESS_NO_TASK;
 800052e:	4b1d      	ldr	r3, [pc, #116]	; (80005a4 <MX_CAN_Init+0xd4>)
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]

  TxHeader.DLC = 5;
 8000534:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <MX_CAN_Init+0xd8>)
 8000536:	2205      	movs	r2, #5
 8000538:	611a      	str	r2, [r3, #16]
  TxHeader.IDE = CAN_ID_STD;
 800053a:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <MX_CAN_Init+0xd8>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = BMS_MEASURE_CAN_ID;
 8000540:	4b19      	ldr	r3, [pc, #100]	; (80005a8 <MX_CAN_Init+0xd8>)
 8000542:	f44f 6289 	mov.w	r2, #1096	; 0x448
 8000546:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8000548:	4b17      	ldr	r3, [pc, #92]	; (80005a8 <MX_CAN_Init+0xd8>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800054e:	4b17      	ldr	r3, [pc, #92]	; (80005ac <MX_CAN_Init+0xdc>)
 8000550:	2201      	movs	r2, #1
 8000552:	621a      	str	r2, [r3, #32]
  canfilterconfig.FilterBank = 13;  // which filter bank to use from the assigned ones
 8000554:	4b15      	ldr	r3, [pc, #84]	; (80005ac <MX_CAN_Init+0xdc>)
 8000556:	220d      	movs	r2, #13
 8000558:	615a      	str	r2, [r3, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800055a:	4b14      	ldr	r3, [pc, #80]	; (80005ac <MX_CAN_Init+0xdc>)
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]
  canfilterconfig.FilterIdHigh = 0x446<<5;
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <MX_CAN_Init+0xdc>)
 8000562:	f648 02c0 	movw	r2, #35008	; 0x88c0
 8000566:	601a      	str	r2, [r3, #0]
  canfilterconfig.FilterIdLow = 0;
 8000568:	4b10      	ldr	r3, [pc, #64]	; (80005ac <MX_CAN_Init+0xdc>)
 800056a:	2200      	movs	r2, #0
 800056c:	605a      	str	r2, [r3, #4]
  canfilterconfig.FilterMaskIdHigh = 0x446<<5;
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <MX_CAN_Init+0xdc>)
 8000570:	f648 02c0 	movw	r2, #35008	; 0x88c0
 8000574:	609a      	str	r2, [r3, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8000576:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <MX_CAN_Init+0xdc>)
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800057c:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <MX_CAN_Init+0xdc>)
 800057e:	2200      	movs	r2, #0
 8000580:	619a      	str	r2, [r3, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <MX_CAN_Init+0xdc>)
 8000584:	2201      	movs	r2, #1
 8000586:	61da      	str	r2, [r3, #28]
  canfilterconfig.SlaveStartFilterBank = 14;  // how many filters to assign to the CAN1 (master can)
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <MX_CAN_Init+0xdc>)
 800058a:	220e      	movs	r2, #14
 800058c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800058e:	4907      	ldr	r1, [pc, #28]	; (80005ac <MX_CAN_Init+0xdc>)
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <MX_CAN_Init+0xcc>)
 8000592:	f001 ff33 	bl	80023fc <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000100 	.word	0x20000100
 80005a0:	40006400 	.word	0x40006400
 80005a4:	200000b0 	.word	0x200000b0
 80005a8:	2000008c 	.word	0x2000008c
 80005ac:	200000d8 	.word	0x200000d8

080005b0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	; 0x28
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a2d      	ldr	r2, [pc, #180]	; (8000680 <HAL_CAN_MspInit+0xd0>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d153      	bne.n	8000678 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005d0:	4b2c      	ldr	r3, [pc, #176]	; (8000684 <HAL_CAN_MspInit+0xd4>)
 80005d2:	69db      	ldr	r3, [r3, #28]
 80005d4:	4a2b      	ldr	r2, [pc, #172]	; (8000684 <HAL_CAN_MspInit+0xd4>)
 80005d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005da:	61d3      	str	r3, [r2, #28]
 80005dc:	4b29      	ldr	r3, [pc, #164]	; (8000684 <HAL_CAN_MspInit+0xd4>)
 80005de:	69db      	ldr	r3, [r3, #28]
 80005e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e8:	4b26      	ldr	r3, [pc, #152]	; (8000684 <HAL_CAN_MspInit+0xd4>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a25      	ldr	r2, [pc, #148]	; (8000684 <HAL_CAN_MspInit+0xd4>)
 80005ee:	f043 0308 	orr.w	r3, r3, #8
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b23      	ldr	r3, [pc, #140]	; (8000684 <HAL_CAN_MspInit+0xd4>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0308 	and.w	r3, r3, #8
 80005fc:	60fb      	str	r3, [r7, #12]
 80005fe:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000600:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	481c      	ldr	r0, [pc, #112]	; (8000688 <HAL_CAN_MspInit+0xd8>)
 8000616:	f002 fe09 	bl	800322c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800061a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800061e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000620:	2302      	movs	r3, #2
 8000622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000624:	2303      	movs	r3, #3
 8000626:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4619      	mov	r1, r3
 800062e:	4816      	ldr	r0, [pc, #88]	; (8000688 <HAL_CAN_MspInit+0xd8>)
 8000630:	f002 fdfc 	bl	800322c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <HAL_CAN_MspInit+0xdc>)
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
 800063a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063c:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000640:	627b      	str	r3, [r7, #36]	; 0x24
 8000642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000644:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000648:	627b      	str	r3, [r7, #36]	; 0x24
 800064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000650:	627b      	str	r3, [r7, #36]	; 0x24
 8000652:	4a0e      	ldr	r2, [pc, #56]	; (800068c <HAL_CAN_MspInit+0xdc>)
 8000654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000656:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000658:	2200      	movs	r2, #0
 800065a:	2100      	movs	r1, #0
 800065c:	2014      	movs	r0, #20
 800065e:	f002 fd1a 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000662:	2014      	movs	r0, #20
 8000664:	f002 fd33 	bl	80030ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	2015      	movs	r0, #21
 800066e:	f002 fd12 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000672:	2015      	movs	r0, #21
 8000674:	f002 fd2b 	bl	80030ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000678:	bf00      	nop
 800067a:	3728      	adds	r7, #40	; 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40006400 	.word	0x40006400
 8000684:	40021000 	.word	0x40021000
 8000688:	40010c00 	.word	0x40010c00
 800068c:	40010000 	.word	0x40010000

08000690 <process_CAN>:

/* USER CODE BEGIN 1 */


uint8_t	process_CAN(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
	//_ADS131M08_ch ch;

	int32_t offset;
	uint8_t ch;

	if (can_task_scheduler & PROCESS_CAN_SEND_NEW_ADC_DATA)
 8000696:	4b7a      	ldr	r3, [pc, #488]	; (8000880 <process_CAN+0x1f0>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d06f      	beq.n	8000782 <process_CAN+0xf2>
	{
		if (adcConfM->Lock == DATA_UNLOCKED )
 80006a2:	4b78      	ldr	r3, [pc, #480]	; (8000884 <process_CAN+0x1f4>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d104      	bne.n	80006b8 <process_CAN+0x28>
			adcConfM->Lock = DATA_LOCKED;
 80006ae:	4b75      	ldr	r3, [pc, #468]	; (8000884 <process_CAN+0x1f4>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2201      	movs	r2, #1
 80006b4:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc

		if(adc_enable_mask & (0x01<<adcConfM->ch))
 80006b8:	4b73      	ldr	r3, [pc, #460]	; (8000888 <process_CAN+0x1f8>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b71      	ldr	r3, [pc, #452]	; (8000884 <process_CAN+0x1f4>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 80006c6:	fa42 f303 	asr.w	r3, r2, r3
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d041      	beq.n	8000756 <process_CAN+0xc6>
		{
			if (!HAL_CAN_IsTxMessagePending(&hcan, TxMailbox))
 80006d2:	4b6e      	ldr	r3, [pc, #440]	; (800088c <process_CAN+0x1fc>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4619      	mov	r1, r3
 80006d8:	486d      	ldr	r0, [pc, #436]	; (8000890 <process_CAN+0x200>)
 80006da:	f002 f86b 	bl	80027b4 <HAL_CAN_IsTxMessagePending>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d135      	bne.n	8000750 <process_CAN+0xc0>
			{
				CanTxData[0] = (adcConfM->chData[adcConfM->ch].measure_type<<4) | adcConfM->ch;
 80006e4:	4b67      	ldr	r3, [pc, #412]	; (8000884 <process_CAN+0x1f4>)
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	4b66      	ldr	r3, [pc, #408]	; (8000884 <process_CAN+0x1f4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 80006f0:	4619      	mov	r1, r3
 80006f2:	460b      	mov	r3, r1
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	1a5b      	subs	r3, r3, r1
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	4413      	add	r3, r2
 80006fc:	3384      	adds	r3, #132	; 0x84
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	011b      	lsls	r3, r3, #4
 8000702:	b25a      	sxtb	r2, r3
 8000704:	4b5f      	ldr	r3, [pc, #380]	; (8000884 <process_CAN+0x1f4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 800070c:	b25b      	sxtb	r3, r3
 800070e:	4313      	orrs	r3, r2
 8000710:	b25b      	sxtb	r3, r3
 8000712:	b2da      	uxtb	r2, r3
 8000714:	4b5f      	ldr	r3, [pc, #380]	; (8000894 <process_CAN+0x204>)
 8000716:	701a      	strb	r2, [r3, #0]
				*((float*)(CanTxData+1)) = adcConfM->chData[adcConfM->ch].v;
 8000718:	4b5a      	ldr	r3, [pc, #360]	; (8000884 <process_CAN+0x1f4>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4b59      	ldr	r3, [pc, #356]	; (8000884 <process_CAN+0x1f4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8000724:	4618      	mov	r0, r3
 8000726:	495c      	ldr	r1, [pc, #368]	; (8000898 <process_CAN+0x208>)
 8000728:	4603      	mov	r3, r0
 800072a:	00db      	lsls	r3, r3, #3
 800072c:	1a1b      	subs	r3, r3, r0
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	4413      	add	r3, r2
 8000732:	3378      	adds	r3, #120	; 0x78
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	600b      	str	r3, [r1, #0]

				if (HAL_CAN_AddTxMessage(&hcan, &TxHeader, CanTxData, &TxMailbox) != HAL_OK)
 8000738:	4b54      	ldr	r3, [pc, #336]	; (800088c <process_CAN+0x1fc>)
 800073a:	4a56      	ldr	r2, [pc, #344]	; (8000894 <process_CAN+0x204>)
 800073c:	4957      	ldr	r1, [pc, #348]	; (800089c <process_CAN+0x20c>)
 800073e:	4854      	ldr	r0, [pc, #336]	; (8000890 <process_CAN+0x200>)
 8000740:	f001 ff69 	bl	8002616 <HAL_CAN_AddTxMessage>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d005      	beq.n	8000756 <process_CAN+0xc6>
				{
					Error_Handler ();
 800074a:	f000 fad9 	bl	8000d00 <Error_Handler>
 800074e:	e002      	b.n	8000756 <process_CAN+0xc6>
				}
			}
			else
				return can_task_scheduler;
 8000750:	4b4b      	ldr	r3, [pc, #300]	; (8000880 <process_CAN+0x1f0>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	e090      	b.n	8000878 <process_CAN+0x1e8>
		}

		if(adcConfM->ch++ >= NUMB_ADC_CH )
 8000756:	4b4b      	ldr	r3, [pc, #300]	; (8000884 <process_CAN+0x1f4>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	f892 30cb 	ldrb.w	r3, [r2, #203]	; 0xcb
 800075e:	1c59      	adds	r1, r3, #1
 8000760:	b2c9      	uxtb	r1, r1
 8000762:	f882 10cb 	strb.w	r1, [r2, #203]	; 0xcb
 8000766:	2b05      	cmp	r3, #5
 8000768:	d90b      	bls.n	8000782 <process_CAN+0xf2>
		{
			adcConfM->Lock = DATA_UNLOCKED;
 800076a:	4b46      	ldr	r3, [pc, #280]	; (8000884 <process_CAN+0x1f4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2200      	movs	r2, #0
 8000770:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
			can_task_scheduler &= ~PROCESS_CAN_SEND_NEW_ADC_DATA;
 8000774:	4b42      	ldr	r3, [pc, #264]	; (8000880 <process_CAN+0x1f0>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	f023 0301 	bic.w	r3, r3, #1
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b40      	ldr	r3, [pc, #256]	; (8000880 <process_CAN+0x1f0>)
 8000780:	701a      	strb	r2, [r3, #0]
		//can_task_scheduler &= ~PROCESS_CAN_SEND_NEW_ADC_DATA;
		//return can_task_scheduler;
	}


	if (can_task_scheduler & PROCESS_CAN_ON_MSG)
 8000782:	4b3f      	ldr	r3, [pc, #252]	; (8000880 <process_CAN+0x1f0>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	2b00      	cmp	r3, #0
 800078c:	d072      	beq.n	8000874 <process_CAN+0x1e4>
	{
		switch (CanRxData[0])
 800078e:	4b44      	ldr	r3, [pc, #272]	; (80008a0 <process_CAN+0x210>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	3b01      	subs	r3, #1
 8000794:	2b06      	cmp	r3, #6
 8000796:	d865      	bhi.n	8000864 <process_CAN+0x1d4>
 8000798:	a201      	add	r2, pc, #4	; (adr r2, 80007a0 <process_CAN+0x110>)
 800079a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079e:	bf00      	nop
 80007a0:	08000865 	.word	0x08000865
 80007a4:	08000865 	.word	0x08000865
 80007a8:	08000865 	.word	0x08000865
 80007ac:	08000865 	.word	0x08000865
 80007b0:	080007bd 	.word	0x080007bd
 80007b4:	08000843 	.word	0x08000843
 80007b8:	0800084b 	.word	0x0800084b
		{
		case SET_RELAY_CMD:
			switch (CanRxData[1])
 80007bc:	4b38      	ldr	r3, [pc, #224]	; (80008a0 <process_CAN+0x210>)
 80007be:	785b      	ldrb	r3, [r3, #1]
 80007c0:	2b03      	cmp	r3, #3
 80007c2:	d02a      	beq.n	800081a <process_CAN+0x18a>
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	dc3a      	bgt.n	800083e <process_CAN+0x1ae>
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d002      	beq.n	80007d2 <process_CAN+0x142>
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d012      	beq.n	80007f6 <process_CAN+0x166>
					else
						HAL_GPIO_WritePin(RELAY_3_GPIO_Port, RELAY_3_Pin, GPIO_PIN_RESET);
					break;

				default:
					break;
 80007d0:	e035      	b.n	800083e <process_CAN+0x1ae>
					if (CanRxData[2])
 80007d2:	4b33      	ldr	r3, [pc, #204]	; (80008a0 <process_CAN+0x210>)
 80007d4:	789b      	ldrb	r3, [r3, #2]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d006      	beq.n	80007e8 <process_CAN+0x158>
						HAL_GPIO_WritePin(RELAY_1_GPIO_Port, RELAY_1_Pin, GPIO_PIN_SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007e0:	4830      	ldr	r0, [pc, #192]	; (80008a4 <process_CAN+0x214>)
 80007e2:	f002 febe 	bl	8003562 <HAL_GPIO_WritePin>
					break;
 80007e6:	e02b      	b.n	8000840 <process_CAN+0x1b0>
						HAL_GPIO_WritePin(RELAY_1_GPIO_Port, RELAY_1_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ee:	482d      	ldr	r0, [pc, #180]	; (80008a4 <process_CAN+0x214>)
 80007f0:	f002 feb7 	bl	8003562 <HAL_GPIO_WritePin>
					break;
 80007f4:	e024      	b.n	8000840 <process_CAN+0x1b0>
					if (CanRxData[2])
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <process_CAN+0x210>)
 80007f8:	789b      	ldrb	r3, [r3, #2]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d006      	beq.n	800080c <process_CAN+0x17c>
						HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000804:	4827      	ldr	r0, [pc, #156]	; (80008a4 <process_CAN+0x214>)
 8000806:	f002 feac 	bl	8003562 <HAL_GPIO_WritePin>
					break;
 800080a:	e019      	b.n	8000840 <process_CAN+0x1b0>
						HAL_GPIO_WritePin(RELAY_2_GPIO_Port, RELAY_2_Pin, GPIO_PIN_RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000812:	4824      	ldr	r0, [pc, #144]	; (80008a4 <process_CAN+0x214>)
 8000814:	f002 fea5 	bl	8003562 <HAL_GPIO_WritePin>
					break;
 8000818:	e012      	b.n	8000840 <process_CAN+0x1b0>
					if (CanRxData[2])
 800081a:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <process_CAN+0x210>)
 800081c:	789b      	ldrb	r3, [r3, #2]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d006      	beq.n	8000830 <process_CAN+0x1a0>
						HAL_GPIO_WritePin(RELAY_3_GPIO_Port, RELAY_3_Pin, GPIO_PIN_SET);
 8000822:	2201      	movs	r2, #1
 8000824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000828:	481e      	ldr	r0, [pc, #120]	; (80008a4 <process_CAN+0x214>)
 800082a:	f002 fe9a 	bl	8003562 <HAL_GPIO_WritePin>
					break;
 800082e:	e007      	b.n	8000840 <process_CAN+0x1b0>
						HAL_GPIO_WritePin(RELAY_3_GPIO_Port, RELAY_3_Pin, GPIO_PIN_RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000836:	481b      	ldr	r0, [pc, #108]	; (80008a4 <process_CAN+0x214>)
 8000838:	f002 fe93 	bl	8003562 <HAL_GPIO_WritePin>
					break;
 800083c:	e000      	b.n	8000840 <process_CAN+0x1b0>
					break;
 800083e:	bf00      	nop
			}
			break;
 8000840:	e011      	b.n	8000866 <process_CAN+0x1d6>

		case ALIVE_CMD:
			alive_timer = ALIVE_TIMEOUT_10MS;
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <process_CAN+0x218>)
 8000844:	220d      	movs	r2, #13
 8000846:	701a      	strb	r2, [r3, #0]
			break;
 8000848:	e00d      	b.n	8000866 <process_CAN+0x1d6>

		case ADC_OFFSET_CAL_CMD:
			//printf("ADC_OFFSET_CAL_CMD\n");

			ch = CanRxData[1];
 800084a:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <process_CAN+0x210>)
 800084c:	785b      	ldrb	r3, [r3, #1]
 800084e:	71fb      	strb	r3, [r7, #7]
			offset = *((int32_t *)(CanRxData+2));
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <process_CAN+0x210>)
 8000852:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000856:	603b      	str	r3, [r7, #0]
			ADS131M08_offset_callibration(ch, offset);
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	6839      	ldr	r1, [r7, #0]
 800085c:	4618      	mov	r0, r3
 800085e:	f000 fcbb 	bl	80011d8 <ADS131M08_offset_callibration>
			break;
 8000862:	e000      	b.n	8000866 <process_CAN+0x1d6>
		case WRITE_REG_CMD:
			//printf("WRITE_REG_CMD\n");
			break;

		default:
			break;
 8000864:	bf00      	nop
		}
		can_task_scheduler &= ~PROCESS_CAN_ON_MSG;
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <process_CAN+0x1f0>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	f023 0302 	bic.w	r3, r3, #2
 800086e:	b2da      	uxtb	r2, r3
 8000870:	4b03      	ldr	r3, [pc, #12]	; (8000880 <process_CAN+0x1f0>)
 8000872:	701a      	strb	r2, [r3, #0]
	}


	return can_task_scheduler;
 8000874:	4b02      	ldr	r3, [pc, #8]	; (8000880 <process_CAN+0x1f0>)
 8000876:	781b      	ldrb	r3, [r3, #0]
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	200000b0 	.word	0x200000b0
 8000884:	20000218 	.word	0x20000218
 8000888:	2000016d 	.word	0x2000016d
 800088c:	200000ac 	.word	0x200000ac
 8000890:	20000100 	.word	0x20000100
 8000894:	200000a4 	.word	0x200000a4
 8000898:	200000a5 	.word	0x200000a5
 800089c:	2000008c 	.word	0x2000008c
 80008a0:	200000d0 	.word	0x200000d0
 80008a4:	40010c00 	.word	0x40010c00
 80008a8:	2000016e 	.word	0x2000016e

080008ac <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, CanRxData) != HAL_OK)
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80008b8:	2100      	movs	r1, #0
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f001 ff9d 	bl	80027fa <HAL_CAN_GetRxMessage>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		Error_Handler();
 80008c6:	f000 fa1b 	bl	8000d00 <Error_Handler>
	}

	if ((RxHeader.StdId == 0x446))
 80008ca:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f240 4246 	movw	r2, #1094	; 0x446
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d10d      	bne.n	80008f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
	{
		can_task_scheduler |= PROCESS_CAN_ON_MSG;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	f043 0302 	orr.w	r3, r3, #2
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80008e2:	701a      	strb	r2, [r3, #0]
    	main_task_scheduler |= PROCESS_CAN;
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	b2da      	uxtb	r2, r3
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80008f0:	701a      	strb	r2, [r3, #0]
	}
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200000d0 	.word	0x200000d0
 8000900:	200000b4 	.word	0x200000b4
 8000904:	200000b0 	.word	0x200000b0
 8000908:	2000016c 	.word	0x2000016c

0800090c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_CRC_Init+0x20>)
 8000912:	4a07      	ldr	r2, [pc, #28]	; (8000930 <MX_CRC_Init+0x24>)
 8000914:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000916:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_CRC_Init+0x20>)
 8000918:	f002 fbf3 	bl	8003102 <HAL_CRC_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000922:	f000 f9ed 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000164 	.word	0x20000164
 8000930:	40023000 	.word	0x40023000

08000934 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000934:	b480      	push	{r7}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a09      	ldr	r2, [pc, #36]	; (8000968 <HAL_CRC_MspInit+0x34>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d10b      	bne.n	800095e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000946:	4b09      	ldr	r3, [pc, #36]	; (800096c <HAL_CRC_MspInit+0x38>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	4a08      	ldr	r2, [pc, #32]	; (800096c <HAL_CRC_MspInit+0x38>)
 800094c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000950:	6153      	str	r3, [r2, #20]
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_CRC_MspInit+0x38>)
 8000954:	695b      	ldr	r3, [r3, #20]
 8000956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095a:	60fb      	str	r3, [r7, #12]
 800095c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800095e:	bf00      	nop
 8000960:	3714      	adds	r7, #20
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	40023000 	.word	0x40023000
 800096c:	40021000 	.word	0x40021000

08000970 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO
*/
void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 0310 	add.w	r3, r7, #16
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000984:	4b3a      	ldr	r3, [pc, #232]	; (8000a70 <MX_GPIO_Init+0x100>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a39      	ldr	r2, [pc, #228]	; (8000a70 <MX_GPIO_Init+0x100>)
 800098a:	f043 0310 	orr.w	r3, r3, #16
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b37      	ldr	r3, [pc, #220]	; (8000a70 <MX_GPIO_Init+0x100>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0310 	and.w	r3, r3, #16
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099c:	4b34      	ldr	r3, [pc, #208]	; (8000a70 <MX_GPIO_Init+0x100>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a33      	ldr	r2, [pc, #204]	; (8000a70 <MX_GPIO_Init+0x100>)
 80009a2:	f043 0320 	orr.w	r3, r3, #32
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b31      	ldr	r3, [pc, #196]	; (8000a70 <MX_GPIO_Init+0x100>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0320 	and.w	r3, r3, #32
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b4:	4b2e      	ldr	r3, [pc, #184]	; (8000a70 <MX_GPIO_Init+0x100>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	4a2d      	ldr	r2, [pc, #180]	; (8000a70 <MX_GPIO_Init+0x100>)
 80009ba:	f043 0304 	orr.w	r3, r3, #4
 80009be:	6193      	str	r3, [r2, #24]
 80009c0:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <MX_GPIO_Init+0x100>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	f003 0304 	and.w	r3, r3, #4
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009cc:	4b28      	ldr	r3, [pc, #160]	; (8000a70 <MX_GPIO_Init+0x100>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	4a27      	ldr	r2, [pc, #156]	; (8000a70 <MX_GPIO_Init+0x100>)
 80009d2:	f043 0308 	orr.w	r3, r3, #8
 80009d6:	6193      	str	r3, [r2, #24]
 80009d8:	4b25      	ldr	r3, [pc, #148]	; (8000a70 <MX_GPIO_Init+0x100>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	f003 0308 	and.w	r3, r3, #8
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MCU_SYNC_RESET_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2118      	movs	r1, #24
 80009e8:	4822      	ldr	r0, [pc, #136]	; (8000a74 <MX_GPIO_Init+0x104>)
 80009ea:	f002 fdba 	bl	8003562 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|RELAY_2_Pin|RELAY_1_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009f4:	4820      	ldr	r0, [pc, #128]	; (8000a78 <MX_GPIO_Init+0x108>)
 80009f6:	f002 fdb4 	bl	8003562 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MCU_DRDY_Pin;
 80009fa:	2304      	movs	r3, #4
 80009fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009fe:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_GPIO_Init+0x10c>)
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MCU_DRDY_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4819      	ldr	r0, [pc, #100]	; (8000a74 <MX_GPIO_Init+0x104>)
 8000a0e:	f002 fc0d 	bl	800322c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MCU_SYNC_RESET_Pin|SPI1_CS_Pin;
 8000a12:	2318      	movs	r3, #24
 8000a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a16:	2301      	movs	r3, #1
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 0310 	add.w	r3, r7, #16
 8000a26:	4619      	mov	r1, r3
 8000a28:	4812      	ldr	r0, [pc, #72]	; (8000a74 <MX_GPIO_Init+0x104>)
 8000a2a:	f002 fbff 	bl	800322c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|RELAY_2_Pin|RELAY_1_Pin;
 8000a2e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	4619      	mov	r1, r3
 8000a46:	480c      	ldr	r0, [pc, #48]	; (8000a78 <MX_GPIO_Init+0x108>)
 8000a48:	f002 fbf0 	bl	800322c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 0310 	add.w	r3, r7, #16
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <MX_GPIO_Init+0x104>)
 8000a62:	f002 fbe3 	bl	800322c <HAL_GPIO_Init>

}
 8000a66:	bf00      	nop
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40010800 	.word	0x40010800
 8000a78:	40010c00 	.word	0x40010c00
 8000a7c:	10210000 	.word	0x10210000

08000a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	main_task_scheduler = 0;
 8000a84:	4b3a      	ldr	r3, [pc, #232]	; (8000b70 <main+0xf0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	701a      	strb	r2, [r3, #0]
	adc_enable_mask = (0x01<<ADC_CH1) | (0x01<<ADC_CH2) | (0x01<<ADC_CH3) | (0x01<<ADC_CH4) | (0x01<<ADC_CH5);
 8000a8a:	4b3a      	ldr	r3, [pc, #232]	; (8000b74 <main+0xf4>)
 8000a8c:	221f      	movs	r2, #31
 8000a8e:	701a      	strb	r2, [r3, #0]
	//adc_enable_mask = (0x01<<ADC_CH5);
	alive_timer = 0;
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <main+0xf8>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	701a      	strb	r2, [r3, #0]
	timer_10ms = 0;
 8000a96:	4b39      	ldr	r3, [pc, #228]	; (8000b7c <main+0xfc>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9c:	f001 fae2 	bl	8002064 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa0:	f000 f876 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa4:	f7ff ff64 	bl	8000970 <MX_GPIO_Init>
  MX_CAN_Init();
 8000aa8:	f7ff fd12 	bl	80004d0 <MX_CAN_Init>
  //MX_RTC_Init();
  MX_SPI1_Init();
 8000aac:	f000 f92e 	bl	8000d0c <MX_SPI1_Init>
  MX_CRC_Init();
 8000ab0:	f7ff ff2c 	bl	800090c <MX_CRC_Init>
  MX_TIM4_Init();
 8000ab4:	f000 fa78 	bl	8000fa8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 8000ab8:	4831      	ldr	r0, [pc, #196]	; (8000b80 <main+0x100>)
 8000aba:	f001 fd68 	bl	800258e <HAL_CAN_Start>

  if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8000abe:	2102      	movs	r1, #2
 8000ac0:	482f      	ldr	r0, [pc, #188]	; (8000b80 <main+0x100>)
 8000ac2:	f001 ffbb 	bl	8002a3c <HAL_CAN_ActivateNotification>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <main+0x50>
  {
	  Error_Handler();
 8000acc:	f000 f918 	bl	8000d00 <Error_Handler>
  }

  ADS131M08_init(&hspi1);
 8000ad0:	482c      	ldr	r0, [pc, #176]	; (8000b84 <main+0x104>)
 8000ad2:	f000 fbb7 	bl	8001244 <ADS131M08_init>

  // Start timer
  HAL_TIM_Base_Start_IT(&htim4);
 8000ad6:	482c      	ldr	r0, [pc, #176]	; (8000b88 <main+0x108>)
 8000ad8:	f003 fffa 	bl	8004ad0 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (main_task_scheduler & PROCESS_ADS131M08)
 8000adc:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <main+0xf0>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d00b      	beq.n	8000b00 <main+0x80>
	  {
		  if (!process_ADS131M08())
 8000ae8:	f000 fb2c 	bl	8001144 <process_ADS131M08>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d106      	bne.n	8000b00 <main+0x80>
			  main_task_scheduler &= ~PROCESS_ADS131M08;
 8000af2:	4b1f      	ldr	r3, [pc, #124]	; (8000b70 <main+0xf0>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	f023 0301 	bic.w	r3, r3, #1
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <main+0xf0>)
 8000afe:	701a      	strb	r2, [r3, #0]
	  }

	  if (main_task_scheduler & PROCESS_CAN)
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <main+0xf0>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	f003 0302 	and.w	r3, r3, #2
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d00b      	beq.n	8000b24 <main+0xa4>
	  {
		  if (!process_CAN())
 8000b0c:	f7ff fdc0 	bl	8000690 <process_CAN>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d106      	bne.n	8000b24 <main+0xa4>
			  main_task_scheduler &= ~PROCESS_CAN;
 8000b16:	4b16      	ldr	r3, [pc, #88]	; (8000b70 <main+0xf0>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	f023 0302 	bic.w	r3, r3, #2
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <main+0xf0>)
 8000b22:	701a      	strb	r2, [r3, #0]
	  }

	  if (main_task_scheduler & PROCESS_10_MS_TASK)
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <main+0xf0>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	f003 0304 	and.w	r3, r3, #4
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00b      	beq.n	8000b48 <main+0xc8>
	  {
		  if (!process_10Ms_Timer())
 8000b30:	f000 f892 	bl	8000c58 <process_10Ms_Timer>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d106      	bne.n	8000b48 <main+0xc8>
			  main_task_scheduler &= ~PROCESS_10_MS_TASK;
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <main+0xf0>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	f023 0304 	bic.w	r3, r3, #4
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	4b0a      	ldr	r3, [pc, #40]	; (8000b70 <main+0xf0>)
 8000b46:	701a      	strb	r2, [r3, #0]
	  }

	  if (main_task_scheduler & PROCESS_100_MS_TASK)
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <main+0xf0>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0c3      	beq.n	8000adc <main+0x5c>
	  {
		  main_task_scheduler &= ~PROCESS_100_MS_TASK;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <main+0xf0>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	f023 0308 	bic.w	r3, r3, #8
 8000b5c:	b2da      	uxtb	r2, r3
 8000b5e:	4b04      	ldr	r3, [pc, #16]	; (8000b70 <main+0xf0>)
 8000b60:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000b62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b66:	4809      	ldr	r0, [pc, #36]	; (8000b8c <main+0x10c>)
 8000b68:	f002 fd13 	bl	8003592 <HAL_GPIO_TogglePin>
	  if (main_task_scheduler & PROCESS_ADS131M08)
 8000b6c:	e7b6      	b.n	8000adc <main+0x5c>
 8000b6e:	bf00      	nop
 8000b70:	2000016c 	.word	0x2000016c
 8000b74:	2000016d 	.word	0x2000016d
 8000b78:	2000016e 	.word	0x2000016e
 8000b7c:	20000170 	.word	0x20000170
 8000b80:	20000100 	.word	0x20000100
 8000b84:	20000174 	.word	0x20000174
 8000b88:	200001d0 	.word	0x200001d0
 8000b8c:	40010c00 	.word	0x40010c00

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b094      	sub	sp, #80	; 0x50
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b9a:	2228      	movs	r2, #40	; 0x28
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f004 fb76 	bl	8005290 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000bc0:	2309      	movs	r3, #9
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000be0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000be4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bea:	4618      	mov	r0, r3
 8000bec:	f002 fd02 	bl	80035f4 <HAL_RCC_OscConfig>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000bf6:	f000 f883 	bl	8000d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfa:	230f      	movs	r3, #15
 8000bfc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2102      	movs	r1, #2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f002 ff6e 	bl	8003af8 <HAL_RCC_ClockConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c22:	f000 f86d 	bl	8000d00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c26:	2301      	movs	r3, #1
 8000c28:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c2e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	4618      	mov	r0, r3
 8000c34:	f003 f8fe 	bl	8003e34 <HAL_RCCEx_PeriphCLKConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000c3e:	f000 f85f 	bl	8000d00 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f003 f83f 	bl	8003ccc <HAL_RCC_MCOConfig>
}
 8000c4e:	bf00      	nop
 8000c50:	3750      	adds	r7, #80	; 0x50
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <process_10Ms_Timer>:
//!
//! \return None.
//
//*****************************************************************************
uint8_t process_10Ms_Timer(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
	if (alive_timer)
 8000c5c:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <process_10Ms_Timer+0x68>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d00c      	beq.n	8000c7e <process_10Ms_Timer+0x26>
	{
		if (--alive_timer == 0)
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <process_10Ms_Timer+0x68>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <process_10Ms_Timer+0x68>)
 8000c6e:	701a      	strb	r2, [r3, #0]
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <process_10Ms_Timer+0x68>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d102      	bne.n	8000c7e <process_10Ms_Timer+0x26>
		{
			//kritisch
			alive_timer = ALIVE_TIMEOUT_10MS;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <process_10Ms_Timer+0x68>)
 8000c7a:	220d      	movs	r2, #13
 8000c7c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (!(++timer_10ms % 10))
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <process_10Ms_Timer+0x6c>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	3301      	adds	r3, #1
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	4b0f      	ldr	r3, [pc, #60]	; (8000cc4 <process_10Ms_Timer+0x6c>)
 8000c88:	801a      	strh	r2, [r3, #0]
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <process_10Ms_Timer+0x6c>)
 8000c8c:	881a      	ldrh	r2, [r3, #0]
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <process_10Ms_Timer+0x70>)
 8000c90:	fba3 1302 	umull	r1, r3, r3, r2
 8000c94:	08d9      	lsrs	r1, r3, #3
 8000c96:	460b      	mov	r3, r1
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	1ad3      	subs	r3, r2, r3
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d106      	bne.n	8000cb4 <process_10Ms_Timer+0x5c>
	{
		main_task_scheduler |= PROCESS_100_MS_TASK;
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <process_10Ms_Timer+0x74>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	f043 0308 	orr.w	r3, r3, #8
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <process_10Ms_Timer+0x74>)
 8000cb2:	701a      	strb	r2, [r3, #0]
	}

	return 0;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	2000016e 	.word	0x2000016e
 8000cc4:	20000170 	.word	0x20000170
 8000cc8:	cccccccd 	.word	0xcccccccd
 8000ccc:	2000016c 	.word	0x2000016c

08000cd0 <HAL_TIM_PeriodElapsedCallback>:
//!
//! \return None.
//
//*****************************************************************************
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim4 )
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d106      	bne.n	8000cee <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
    main_task_scheduler |= PROCESS_10_MS_TASK;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000cec:	701a      	strb	r2, [r3, #0]
  }
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	200001d0 	.word	0x200001d0
 8000cfc:	2000016c 	.word	0x2000016c

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <Error_Handler+0x8>
	...

08000d0c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d12:	4a18      	ldr	r2, [pc, #96]	; (8000d74 <MX_SPI1_Init+0x68>)
 8000d14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d40:	2210      	movs	r2, #16
 8000d42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d58:	220a      	movs	r2, #10
 8000d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d5c:	4804      	ldr	r0, [pc, #16]	; (8000d70 <MX_SPI1_Init+0x64>)
 8000d5e:	f003 f91f 	bl	8003fa0 <HAL_SPI_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d68:	f7ff ffca 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000174 	.word	0x20000174
 8000d74:	40013000 	.word	0x40013000

08000d78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a1f      	ldr	r2, [pc, #124]	; (8000e10 <HAL_SPI_MspInit+0x98>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d137      	bne.n	8000e08 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <HAL_SPI_MspInit+0x9c>)
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	4a1d      	ldr	r2, [pc, #116]	; (8000e14 <HAL_SPI_MspInit+0x9c>)
 8000d9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000da2:	6193      	str	r3, [r2, #24]
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <HAL_SPI_MspInit+0x9c>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_SPI_MspInit+0x9c>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <HAL_SPI_MspInit+0x9c>)
 8000db6:	f043 0304 	orr.w	r3, r3, #4
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_SPI_MspInit+0x9c>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000dc8:	23a0      	movs	r3, #160	; 0xa0
 8000dca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480f      	ldr	r0, [pc, #60]	; (8000e18 <HAL_SPI_MspInit+0xa0>)
 8000ddc:	f002 fa26 	bl	800322c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000de0:	2340      	movs	r3, #64	; 0x40
 8000de2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	4619      	mov	r1, r3
 8000df2:	4809      	ldr	r0, [pc, #36]	; (8000e18 <HAL_SPI_MspInit+0xa0>)
 8000df4:	f002 fa1a 	bl	800322c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2023      	movs	r0, #35	; 0x23
 8000dfe:	f002 f94a 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000e02:	2023      	movs	r0, #35	; 0x23
 8000e04:	f002 f963 	bl	80030ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e08:	bf00      	nop
 8000e0a:	3720      	adds	r7, #32
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40013000 	.word	0x40013000
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010800 	.word	0x40010800

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_MspInit+0x5c>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <HAL_MspInit+0x5c>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6193      	str	r3, [r2, #24]
 8000e2e:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_MspInit+0x5c>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <HAL_MspInit+0x5c>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <HAL_MspInit+0x5c>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	61d3      	str	r3, [r2, #28]
 8000e46:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <HAL_MspInit+0x5c>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_MspInit+0x60>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <HAL_MspInit+0x60>)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40010000 	.word	0x40010000

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <NMI_Handler+0x4>

08000e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <HardFault_Handler+0x4>

08000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <MemManage_Handler+0x4>

08000e92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <BusFault_Handler+0x4>

08000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <UsageFault_Handler+0x4>

08000e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bc80      	pop	{r7}
 8000ea8:	4770      	bx	lr

08000eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr

08000eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr

08000ec2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec6:	f001 f913 	bl	80020f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ed4:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000ed6:	f001 fdd6 	bl	8002a86 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000100 	.word	0x20000100

08000ee4 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <CAN1_RX1_IRQHandler+0x10>)
 8000eea:	f001 fdcc 	bl	8002a86 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000100 	.word	0x20000100

08000ef8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000efc:	4802      	ldr	r0, [pc, #8]	; (8000f08 <TIM4_IRQHandler+0x10>)
 8000efe:	f003 fe39 	bl	8004b74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200001d0 	.word	0x200001d0

08000f0c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <SPI1_IRQHandler+0x10>)
 8000f12:	f003 fb91 	bl	8004638 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000174 	.word	0x20000174

08000f20 <EXTI2_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MCU_DRDY_Pin);
 8000f24:	2004      	movs	r0, #4
 8000f26:	f002 fb4d 	bl	80035c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f38:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <_sbrk+0x5c>)
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <_sbrk+0x60>)
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d102      	bne.n	8000f52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f4c:	4b11      	ldr	r3, [pc, #68]	; (8000f94 <_sbrk+0x64>)
 8000f4e:	4a12      	ldr	r2, [pc, #72]	; (8000f98 <_sbrk+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <_sbrk+0x64>)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4413      	add	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d207      	bcs.n	8000f70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f60:	f004 f964 	bl	800522c <__errno>
 8000f64:	4603      	mov	r3, r0
 8000f66:	220c      	movs	r2, #12
 8000f68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	e009      	b.n	8000f84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <_sbrk+0x64>)
 8000f80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f82:	68fb      	ldr	r3, [r7, #12]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3718      	adds	r7, #24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20005000 	.word	0x20005000
 8000f90:	00000400 	.word	0x00000400
 8000f94:	200001cc 	.word	0x200001cc
 8000f98:	20000238 	.word	0x20000238

08000f9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <MX_TIM4_Init+0x94>)
 8000fc6:	4a1e      	ldr	r2, [pc, #120]	; (8001040 <MX_TIM4_Init+0x98>)
 8000fc8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <MX_TIM4_Init+0x94>)
 8000fcc:	2247      	movs	r2, #71	; 0x47
 8000fce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_TIM4_Init+0x94>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <MX_TIM4_Init+0x94>)
 8000fd8:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fdc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <MX_TIM4_Init+0x94>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <MX_TIM4_Init+0x94>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fea:	4814      	ldr	r0, [pc, #80]	; (800103c <MX_TIM4_Init+0x94>)
 8000fec:	f003 fd20 	bl	8004a30 <HAL_TIM_Base_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000ff6:	f7ff fe83 	bl	8000d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	4619      	mov	r1, r3
 8001006:	480d      	ldr	r0, [pc, #52]	; (800103c <MX_TIM4_Init+0x94>)
 8001008:	f003 febc 	bl	8004d84 <HAL_TIM_ConfigClockSource>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001012:	f7ff fe75 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800101e:	463b      	mov	r3, r7
 8001020:	4619      	mov	r1, r3
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <MX_TIM4_Init+0x94>)
 8001024:	f004 f892 	bl	800514c <HAL_TIMEx_MasterConfigSynchronization>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800102e:	f7ff fe67 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200001d0 	.word	0x200001d0
 8001040:	40000800 	.word	0x40000800

08001044 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <HAL_TIM_Base_MspInit+0x44>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d113      	bne.n	800107e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001056:	4b0d      	ldr	r3, [pc, #52]	; (800108c <HAL_TIM_Base_MspInit+0x48>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	4a0c      	ldr	r2, [pc, #48]	; (800108c <HAL_TIM_Base_MspInit+0x48>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	61d3      	str	r3, [r2, #28]
 8001062:	4b0a      	ldr	r3, [pc, #40]	; (800108c <HAL_TIM_Base_MspInit+0x48>)
 8001064:	69db      	ldr	r3, [r3, #28]
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	201e      	movs	r0, #30
 8001074:	f002 f80f 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001078:	201e      	movs	r0, #30
 800107a:	f002 f828 	bl	80030ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40000800 	.word	0x40000800
 800108c:	40021000 	.word	0x40021000

08001090 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001092:	490d      	ldr	r1, [pc, #52]	; (80010c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001094:	4a0d      	ldr	r2, [pc, #52]	; (80010cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001098:	e002      	b.n	80010a0 <LoopCopyDataInit>

0800109a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800109c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800109e:	3304      	adds	r3, #4

080010a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a4:	d3f9      	bcc.n	800109a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010a8:	4c0a      	ldr	r4, [pc, #40]	; (80010d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010ac:	e001      	b.n	80010b2 <LoopFillZerobss>

080010ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b0:	3204      	adds	r2, #4

080010b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b4:	d3fb      	bcc.n	80010ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010b6:	f7ff ff71 	bl	8000f9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ba:	f004 f8bd 	bl	8005238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010be:	f7ff fcdf 	bl	8000a80 <main>
  bx lr
 80010c2:	4770      	bx	lr
  ldr r0, =_sdata
 80010c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010cc:	0800544c 	.word	0x0800544c
  ldr r2, =_sbss
 80010d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010d4:	20000234 	.word	0x20000234

080010d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d8:	e7fe      	b.n	80010d8 <ADC1_2_IRQHandler>
	...

080010dc <getRegisterValue>:
//!
//! \return unsigned 16-bit register value.
//
//*****************************************************************************
uint16_t getRegisterValue(uint8_t address)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
    assert(address < NUM_REGISTERS);
    return adcConfM->sr.mp[address];
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <getRegisterValue+0x24>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80010f4:	b29b      	uxth	r3, r3
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	20000218 	.word	0x20000218

08001104 <HAL_GPIO_EXTI_Callback>:


// EXTI  External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == MCU_DRDY_Pin) // If The INT Source Is EXTI Line9 (A9 Pin)
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	2b04      	cmp	r3, #4
 8001112:	d10d      	bne.n	8001130 <HAL_GPIO_EXTI_Callback+0x2c>
    {
    	//ADS131M08_receive_data();
    	ads131m08_task_scheduler |= ADS131M08_PARSE_NEW_DATA;
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <HAL_GPIO_EXTI_Callback+0x38>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <HAL_GPIO_EXTI_Callback+0x38>)
 8001120:	701a      	strb	r2, [r3, #0]
    	main_task_scheduler |= PROCESS_ADS131M08;
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	b2da      	uxtb	r2, r3
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <HAL_GPIO_EXTI_Callback+0x3c>)
 800112e:	701a      	strb	r2, [r3, #0]
    }
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	2000021c 	.word	0x2000021c
 8001140:	2000016c 	.word	0x2000016c

08001144 <process_ADS131M08>:




uint8_t	process_ADS131M08(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0

	if (ads131m08_task_scheduler & ADS131M08_SEND_AGGR_DATA)
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <process_ADS131M08+0x84>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d014      	beq.n	800117e <process_ADS131M08+0x3a>
	{
		ads131m08_task_scheduler &= ~ADS131M08_SEND_AGGR_DATA;
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <process_ADS131M08+0x84>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	f023 0302 	bic.w	r3, r3, #2
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <process_ADS131M08+0x84>)
 8001160:	701a      	strb	r2, [r3, #0]
		can_task_scheduler |= PROCESS_CAN_SEND_NEW_ADC_DATA;
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <process_ADS131M08+0x88>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	b2da      	uxtb	r2, r3
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <process_ADS131M08+0x88>)
 800116e:	701a      	strb	r2, [r3, #0]
    	main_task_scheduler |= PROCESS_CAN;
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <process_ADS131M08+0x8c>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	f043 0302 	orr.w	r3, r3, #2
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <process_ADS131M08+0x8c>)
 800117c:	701a      	strb	r2, [r3, #0]
	}

	if (ads131m08_task_scheduler & ADS131M08_PARSE_NEW_DATA)
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <process_ADS131M08+0x84>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	2b00      	cmp	r3, #0
 8001188:	d01a      	beq.n	80011c0 <process_ADS131M08+0x7c>
	{

	    if (adcConfM->Lock == DATA_UNLOCKED)
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <process_ADS131M08+0x90>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f893 30cc 	ldrb.w	r3, [r3, #204]	; 0xcc
 8001192:	2b00      	cmp	r3, #0
 8001194:	d114      	bne.n	80011c0 <process_ADS131M08+0x7c>
	    {
			ADS131M08_receive_data();
 8001196:	f000 fc7d 	bl	8001a94 <ADS131M08_receive_data>
	    	adcConfM->Lock = DATA_LOCKED;
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <process_ADS131M08+0x90>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2201      	movs	r2, #1
 80011a0:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
			ADS131M08_parse_adc_data();
 80011a4:	f000 fce0 	bl	8001b68 <ADS131M08_parse_adc_data>
	    	adcConfM->Lock = DATA_UNLOCKED;
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <process_ADS131M08+0x90>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
			ads131m08_task_scheduler &= ~ADS131M08_PARSE_NEW_DATA;
 80011b2:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <process_ADS131M08+0x84>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	f023 0301 	bic.w	r3, r3, #1
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	4b02      	ldr	r3, [pc, #8]	; (80011c8 <process_ADS131M08+0x84>)
 80011be:	701a      	strb	r2, [r3, #0]
	    }
	}

	return ads131m08_task_scheduler;
 80011c0:	4b01      	ldr	r3, [pc, #4]	; (80011c8 <process_ADS131M08+0x84>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	2000021c 	.word	0x2000021c
 80011cc:	200000b0 	.word	0x200000b0
 80011d0:	2000016c 	.word	0x2000016c
 80011d4:	20000218 	.word	0x20000218

080011d8 <ADS131M08_offset_callibration>:


uint8_t	ADS131M08_offset_callibration(_ADS131M08_ch ch, int32_t offset)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	71fb      	strb	r3, [r7, #7]
	uint8_t addr;
	uint16_t regs;
	uint32_t data;

	if (ch >= NUMB_ADC_CH)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b05      	cmp	r3, #5
 80011e8:	d901      	bls.n	80011ee <ADS131M08_offset_callibration+0x16>
		return 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e025      	b.n	800123a <ADS131M08_offset_callibration+0x62>
//	if (offset & 0x80000000)
//		data = (0xFFFFFF - (offset & 0x007FFFFF)) | 0x800000;
//	else
//		data = offset & 0x007FFFFF;

	data = offset & 0x00FFFFFF;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80011f4:	60fb      	str	r3, [r7, #12]

	addr = CH0_OCAL_MSB_ADDRESS + ch*5;
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	461a      	mov	r2, r3
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	330a      	adds	r3, #10
 8001202:	72fb      	strb	r3, [r7, #11]

	regs = (uint16_t)((data & 0xFFFF00) >> 8);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	0a1b      	lsrs	r3, r3, #8
 8001208:	813b      	strh	r3, [r7, #8]
	writeSingleRegister(addr, regs);
 800120a:	893a      	ldrh	r2, [r7, #8]
 800120c:	7afb      	ldrb	r3, [r7, #11]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f000 fa03 	bl	800161c <writeSingleRegister>

	addr = CH0_OCAL_LSB_ADDRESS + ch*5;
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	461a      	mov	r2, r3
 800121a:	0092      	lsls	r2, r2, #2
 800121c:	4413      	add	r3, r2
 800121e:	b2db      	uxtb	r3, r3
 8001220:	330b      	adds	r3, #11
 8001222:	72fb      	strb	r3, [r7, #11]
	regs = (uint16_t)((data & 0x0000FF) << 8);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	b29b      	uxth	r3, r3
 8001228:	021b      	lsls	r3, r3, #8
 800122a:	813b      	strh	r3, [r7, #8]
	writeSingleRegister(addr, regs);
 800122c:	893a      	ldrh	r2, [r7, #8]
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f9f2 	bl	800161c <writeSingleRegister>

	return 1;
 8001238:	2301      	movs	r3, #1
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <ADS131M08_init>:

/* (OPTIONAL) Check STATUS register for faults */


HAL_StatusTypeDef ADS131M08_init(SPI_HandleTypeDef* hspi)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef result = HAL_OK;
 800124c:	2300      	movs	r3, #0
 800124e:	73bb      	strb	r3, [r7, #14]
    uint8_t i;

	adcConfM  = (_adcConfM*)malloc(sizeof(_adcConfM));
 8001250:	20cd      	movs	r0, #205	; 0xcd
 8001252:	f004 f815 	bl	8005280 <malloc>
 8001256:	4603      	mov	r3, r0
 8001258:	461a      	mov	r2, r3
 800125a:	4b84      	ldr	r3, [pc, #528]	; (800146c <ADS131M08_init+0x228>)
 800125c:	601a      	str	r2, [r3, #0]
	memset(adcConfM, 0, sizeof(_adcConfM));
 800125e:	4b83      	ldr	r3, [pc, #524]	; (800146c <ADS131M08_init+0x228>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	22cd      	movs	r2, #205	; 0xcd
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f004 f812 	bl	8005290 <memset>
	adcConfM->stat            = ADS131M08_INIT;
 800126c:	4b7f      	ldr	r3, [pc, #508]	; (800146c <ADS131M08_init+0x228>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
	adcConfM->hspi            = hspi;
 8001274:	4b7d      	ldr	r3, [pc, #500]	; (800146c <ADS131M08_init+0x228>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	659a      	str	r2, [r3, #88]	; 0x58
	adcConfM->nReset.port     = MCU_SYNC_RESET_GPIO_Port;
 800127c:	4b7b      	ldr	r3, [pc, #492]	; (800146c <ADS131M08_init+0x228>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001286:	2200      	movs	r2, #0
 8001288:	f042 0208 	orr.w	r2, r2, #8
 800128c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8001290:	2200      	movs	r2, #0
 8001292:	f042 0201 	orr.w	r2, r2, #1
 8001296:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 800129a:	2200      	movs	r2, #0
 800129c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012a0:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
	adcConfM->nReset.pin      = MCU_SYNC_RESET_Pin;
 80012a4:	4b71      	ldr	r3, [pc, #452]	; (800146c <ADS131M08_init+0x228>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f042 0208 	orr.w	r2, r2, #8
 80012ae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	adcConfM->cs.port         = GPIOA;
 80012b8:	4b6c      	ldr	r3, [pc, #432]	; (800146c <ADS131M08_init+0x228>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 80012c2:	2200      	movs	r2, #0
 80012c4:	f042 0208 	orr.w	r2, r2, #8
 80012c8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 80012cc:	2200      	movs	r2, #0
 80012ce:	f042 0201 	orr.w	r2, r2, #1
 80012d2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80012d6:	2200      	movs	r2, #0
 80012d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012dc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	adcConfM->cs.pin          = SPI1_CS_Pin;
 80012e0:	4b62      	ldr	r3, [pc, #392]	; (800146c <ADS131M08_init+0x228>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f042 0210 	orr.w	r2, r2, #16
 80012ea:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	adcConfM->nDrdy.port      = MCU_DRDY_GPIO_Port;
 80012f4:	4b5d      	ldr	r3, [pc, #372]	; (800146c <ADS131M08_init+0x228>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80012fe:	2200      	movs	r2, #0
 8001300:	f042 0208 	orr.w	r2, r2, #8
 8001304:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8001308:	2200      	movs	r2, #0
 800130a:	f042 0201 	orr.w	r2, r2, #1
 800130e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8001312:	2200      	movs	r2, #0
 8001314:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001318:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	adcConfM->nDrdy.pin       = MCU_DRDY_Pin;
 800131c:	4b53      	ldr	r3, [pc, #332]	; (800146c <ADS131M08_init+0x228>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2200      	movs	r2, #0
 8001322:	f042 0204 	orr.w	r2, r2, #4
 8001326:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 800132a:	2200      	movs	r2, #0
 800132c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	adcConfM->bufLen          = M08_WORDS_IN_FRAME * M08_WORD_LENGTH;      // 9 Words x 24 Bits
 8001330:	4b4e      	ldr	r3, [pc, #312]	; (800146c <ADS131M08_init+0x228>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2215      	movs	r2, #21
 8001336:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	adcConfM->rxBuf           = (uint8_t*)malloc(adcConfM->bufLen);
 800133a:	4b4c      	ldr	r3, [pc, #304]	; (800146c <ADS131M08_init+0x228>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001342:	461a      	mov	r2, r3
 8001344:	4b49      	ldr	r3, [pc, #292]	; (800146c <ADS131M08_init+0x228>)
 8001346:	681c      	ldr	r4, [r3, #0]
 8001348:	4610      	mov	r0, r2
 800134a:	f003 ff99 	bl	8005280 <malloc>
 800134e:	4603      	mov	r3, r0
 8001350:	f8c4 306e 	str.w	r3, [r4, #110]	; 0x6e
	memset(adcConfM->rxBuf, 0, adcConfM->bufLen);
 8001354:	4b45      	ldr	r3, [pc, #276]	; (800146c <ADS131M08_init+0x228>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f8d3 006e 	ldr.w	r0, [r3, #110]	; 0x6e
 800135c:	4b43      	ldr	r3, [pc, #268]	; (800146c <ADS131M08_init+0x228>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001364:	461a      	mov	r2, r3
 8001366:	2100      	movs	r1, #0
 8001368:	f003 ff92 	bl	8005290 <memset>
	adcConfM->txBuf           = (uint8_t*)malloc(adcConfM->bufLen);
 800136c:	4b3f      	ldr	r3, [pc, #252]	; (800146c <ADS131M08_init+0x228>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001374:	461a      	mov	r2, r3
 8001376:	4b3d      	ldr	r3, [pc, #244]	; (800146c <ADS131M08_init+0x228>)
 8001378:	681c      	ldr	r4, [r3, #0]
 800137a:	4610      	mov	r0, r2
 800137c:	f003 ff80 	bl	8005280 <malloc>
 8001380:	4603      	mov	r3, r0
 8001382:	f8c4 3072 	str.w	r3, [r4, #114]	; 0x72
	memset(adcConfM->txBuf, 0, adcConfM->bufLen);
 8001386:	4b39      	ldr	r3, [pc, #228]	; (800146c <ADS131M08_init+0x228>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f8d3 0072 	ldr.w	r0, [r3, #114]	; 0x72
 800138e:	4b37      	ldr	r3, [pc, #220]	; (800146c <ADS131M08_init+0x228>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001396:	461a      	mov	r2, r3
 8001398:	2100      	movs	r1, #0
 800139a:	f003 ff79 	bl	8005290 <memset>
	//adcConfM->ch = 0;
	//adcConfM->Lock = DATA_UNLOCKED;

	for(i=0; i<CHANNEL_COUNT; i++ )
 800139e:	2300      	movs	r3, #0
 80013a0:	73fb      	strb	r3, [r7, #15]
 80013a2:	e044      	b.n	800142e <ADS131M08_init+0x1ea>
	{
		adcConfM->chData[i].average = 0;
 80013a4:	4b31      	ldr	r3, [pc, #196]	; (800146c <ADS131M08_init+0x228>)
 80013a6:	6819      	ldr	r1, [r3, #0]
 80013a8:	7bfa      	ldrb	r2, [r7, #15]
 80013aa:	4613      	mov	r3, r2
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	1a9b      	subs	r3, r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	440b      	add	r3, r1
 80013b4:	3370      	adds	r3, #112	; 0x70
 80013b6:	2200      	movs	r2, #0
 80013b8:	71da      	strb	r2, [r3, #7]
 80013ba:	2200      	movs	r2, #0
 80013bc:	721a      	strb	r2, [r3, #8]
 80013be:	2200      	movs	r2, #0
 80013c0:	725a      	strb	r2, [r3, #9]
 80013c2:	2200      	movs	r2, #0
 80013c4:	729a      	strb	r2, [r3, #10]
		adcConfM->chData[i].average_counter = 0;
 80013c6:	4b29      	ldr	r3, [pc, #164]	; (800146c <ADS131M08_init+0x228>)
 80013c8:	6819      	ldr	r1, [r3, #0]
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	4613      	mov	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	1a9b      	subs	r3, r3, r2
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	440b      	add	r3, r1
 80013d6:	337b      	adds	r3, #123	; 0x7b
 80013d8:	2200      	movs	r2, #0
 80013da:	701a      	strb	r2, [r3, #0]
		switch (i)
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	2b05      	cmp	r3, #5
 80013e0:	d009      	beq.n	80013f6 <ADS131M08_init+0x1b2>
 80013e2:	2b05      	cmp	r3, #5
 80013e4:	dc1f      	bgt.n	8001426 <ADS131M08_init+0x1e2>
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	dc02      	bgt.n	80013f0 <ADS131M08_init+0x1ac>
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	da03      	bge.n	80013f6 <ADS131M08_init+0x1b2>
				break;
			case ADC_CH5:
				adcConfM->chData[i].measure_type=VOLTAGE_MV_FLOAT;
				break;
			default:
				break;
 80013ee:	e01a      	b.n	8001426 <ADS131M08_init+0x1e2>
		switch (i)
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d00c      	beq.n	800140e <ADS131M08_init+0x1ca>
				break;
 80013f4:	e017      	b.n	8001426 <ADS131M08_init+0x1e2>
				adcConfM->chData[i].measure_type=CURRENT_MA_FLOAT;
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <ADS131M08_init+0x228>)
 80013f8:	6819      	ldr	r1, [r3, #0]
 80013fa:	7bfa      	ldrb	r2, [r7, #15]
 80013fc:	4613      	mov	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	1a9b      	subs	r3, r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	440b      	add	r3, r1
 8001406:	3384      	adds	r3, #132	; 0x84
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
				break;
 800140c:	e00c      	b.n	8001428 <ADS131M08_init+0x1e4>
				adcConfM->chData[i].measure_type=VOLTAGE_MV_FLOAT;
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <ADS131M08_init+0x228>)
 8001410:	6819      	ldr	r1, [r3, #0]
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	4613      	mov	r3, r2
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	1a9b      	subs	r3, r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	440b      	add	r3, r1
 800141e:	3384      	adds	r3, #132	; 0x84
 8001420:	2201      	movs	r2, #1
 8001422:	701a      	strb	r2, [r3, #0]
				break;
 8001424:	e000      	b.n	8001428 <ADS131M08_init+0x1e4>
				break;
 8001426:	bf00      	nop
	for(i=0; i<CHANNEL_COUNT; i++ )
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	3301      	adds	r3, #1
 800142c:	73fb      	strb	r3, [r7, #15]
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	2b05      	cmp	r3, #5
 8001432:	d9b7      	bls.n	80013a4 <ADS131M08_init+0x160>
		}
	}

	ads131m08_task_scheduler = ADS131M08_NO_TASK;
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <ADS131M08_init+0x22c>)
 8001436:	2200      	movs	r2, #0
 8001438:	701a      	strb	r2, [r3, #0]

    result = ADS131M08_startup();
 800143a:	f000 f81b 	bl	8001474 <ADS131M08_startup>
 800143e:	4603      	mov	r3, r0
 8001440:	73bb      	strb	r3, [r7, #14]

    if(result != HAL_OK)
 8001442:	7bbb      	ldrb	r3, [r7, #14]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d003      	beq.n	8001450 <ADS131M08_init+0x20c>
    {
    	adcConfM->stat = ADS131M08_INIT_FAIL;
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <ADS131M08_init+0x228>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2206      	movs	r2, #6
 800144e:	701a      	strb	r2, [r3, #0]

	//while(ADS131M08_read_drdy_signal()==GPIO_PIN_SET){}

    //enable DRDY-falling edge int to start continous DMA-read
    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	2008      	movs	r0, #8
 8001456:	f001 fe1e 	bl	8003096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800145a:	2008      	movs	r0, #8
 800145c:	f001 fe37 	bl	80030ce <HAL_NVIC_EnableIRQ>

    return result;
 8001460:	7bbb      	ldrb	r3, [r7, #14]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	bd90      	pop	{r4, r7, pc}
 800146a:	bf00      	nop
 800146c:	20000218 	.word	0x20000218
 8001470:	2000021c 	.word	0x2000021c

08001474 <ADS131M08_startup>:
//! \return None.
//
//*****************************************************************************
HAL_StatusTypeDef ADS131M08_startup()

{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
	int i=0;
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]

    // Reset Sequence
    HAL_GPIO_WritePin(adcConfM->cs.port, adcConfM->cs.pin, GPIO_PIN_SET);
 800147e:	4b24      	ldr	r3, [pc, #144]	; (8001510 <ADS131M08_startup+0x9c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f8d3 0062 	ldr.w	r0, [r3, #98]	; 0x62
 8001486:	4b22      	ldr	r3, [pc, #136]	; (8001510 <ADS131M08_startup+0x9c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800148e:	b29b      	uxth	r3, r3
 8001490:	2201      	movs	r2, #1
 8001492:	4619      	mov	r1, r3
 8001494:	f002 f865 	bl	8003562 <HAL_GPIO_WritePin>

	/* (OPTIONAL) Provide additional delay time for power supply settling */
	HAL_Delay(50);
 8001498:	2032      	movs	r0, #50	; 0x32
 800149a:	f000 fe45 	bl	8002128 <HAL_Delay>

	/* (OPTIONAL) Toggle nRESET pin to ensure default register settings. */
	/* NOTE: This also ensures that the device registers are unlocked.	 */
	toggleRESET();
 800149e:	f000 f839 	bl	8001514 <toggleRESET>

    /* (REQUIRED) Initialize internal 'registerMap' array with device default settings */
	restoreRegisterDefaults();
 80014a2:	f000 f9b5 	bl	8001810 <restoreRegisterDefaults>

    /* (OPTIONAL) Validate first response word when beginning SPI communication: (0xFF20 | CHANCNT) */
	uint16_t response = sendCommand(OPCODE_NULL);
 80014a6:	2000      	movs	r0, #0
 80014a8:	f000 f924 	bl	80016f4 <sendCommand>
 80014ac:	4603      	mov	r3, r0
 80014ae:	807b      	strh	r3, [r7, #2]

	/* (OPTIONAL) Define your initial register settings here */
    writeSingleRegister(CLOCK_ADDRESS, (CLOCK_DEFAULT & ~CLOCK_OSR_MASK) | CLOCK_OSR_16384);
 80014b0:	f643 711e 	movw	r1, #16158	; 0x3f1e
 80014b4:	2003      	movs	r0, #3
 80014b6:	f000 f8b1 	bl	800161c <writeSingleRegister>

    /* (REQUIRED) Configure MODE register settings
     * NOTE: This function call is required here for this particular code implementation to work.
     * This function will enforce the MODE register settings as selected in the 'ads131m0x.h' header file.
     */
    writeSingleRegister(MODE_ADDRESS, MODE_DEFAULT);
 80014ba:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 80014be:	2002      	movs	r0, #2
 80014c0:	f000 f8ac 	bl	800161c <writeSingleRegister>
    // Wakeup device


    // Ignore the first 5 conversion results to allow for the
    // output buffers to fill-up and the SINC3 filter to settle
    for(i = 0; i < 5; i++)
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	e01a      	b.n	8001500 <ADS131M08_startup+0x8c>
    {
//        ADS131M08_wait_drdy_int(100);
        delay_us(5);
 80014ca:	2005      	movs	r0, #5
 80014cc:	f000 fda8 	bl	8002020 <delay_us>
        ADS131M08_control_cs_signal(RESET_SIGNAL);
 80014d0:	2000      	movs	r0, #0
 80014d2:	f000 f95d 	bl	8001790 <ADS131M08_control_cs_signal>
        HAL_SPI_Receive(adcConfM->hspi, adcConfM->rxBuf, adcConfM->bufLen, SPI_DEFAULT_TIMEOUT);
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <ADS131M08_startup+0x9c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <ADS131M08_startup+0x9c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f8d3 106e 	ldr.w	r1, [r3, #110]	; 0x6e
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <ADS131M08_startup+0x9c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	2364      	movs	r3, #100	; 0x64
 80014f0:	f002 fdda 	bl	80040a8 <HAL_SPI_Receive>
        ADS131M08_control_cs_signal(SET_SIGNAL);
 80014f4:	2001      	movs	r0, #1
 80014f6:	f000 f94b 	bl	8001790 <ADS131M08_control_cs_signal>
    for(i = 0; i < 5; i++)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3301      	adds	r3, #1
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b04      	cmp	r3, #4
 8001504:	dde1      	ble.n	80014ca <ADS131M08_startup+0x56>
    }

    return HAL_OK;
 8001506:	2300      	movs	r3, #0
	/* (OPTIONAL) Check STATUS register for faults */
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000218 	.word	0x20000218

08001514 <toggleRESET>:
//!
//! \return None.
//
//*****************************************************************************
void toggleRESET(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
    /* --- INSERT YOUR CODE HERE --- */
    HAL_GPIO_WritePin(adcConfM->nReset.port, adcConfM->nReset.pin, GPIO_PIN_RESET);
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <toggleRESET+0x44>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <toggleRESET+0x44>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001526:	b29b      	uxth	r3, r3
 8001528:	2200      	movs	r2, #0
 800152a:	4619      	mov	r1, r3
 800152c:	f002 f819 	bl	8003562 <HAL_GPIO_WritePin>

    // Minimum /RESET pulse width (tSRLRST) equals 2,048 CLKIN periods (1 ms @ 2.048 MHz)
    HAL_Delay(2);
 8001530:	2002      	movs	r0, #2
 8001532:	f000 fdf9 	bl	8002128 <HAL_Delay>

    HAL_GPIO_WritePin(adcConfM->nReset.port, adcConfM->nReset.pin, GPIO_PIN_SET);
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <toggleRESET+0x44>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <toggleRESET+0x44>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001544:	b29b      	uxth	r3, r3
 8001546:	2201      	movs	r2, #1
 8001548:	4619      	mov	r1, r3
 800154a:	f002 f80a 	bl	8003562 <HAL_GPIO_WritePin>
    // tREGACQ delay before communicating with the device again
    delay_us(5);
 800154e:	2005      	movs	r0, #5
 8001550:	f000 fd66 	bl	8002020 <delay_us>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000218 	.word	0x20000218

0800155c <readSingleRegister>:
//!
//! \return Returns the 8-bit register read result.
//
//*****************************************************************************
uint16_t readSingleRegister(uint8_t address)
{
 800155c:	b5b0      	push	{r4, r5, r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af02      	add	r7, sp, #8
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
	/* Check that the register address is in range */
	assert(address < NUM_REGISTERS);

    adcConfM->regAddr = address;
 8001566:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <readSingleRegister+0xb8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	79fa      	ldrb	r2, [r7, #7]
 800156c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
// Build TX and RX byte array
#ifdef ENABLE_CRC_IN
	adcConfM->txBuf[8] = 0;      // 2 words, up to 4 bytes each = 8 bytes maximum
	adcConfM->rxBuf[8] = 0;
#else
	adcConfM->txBuf[4] = 0;      // 1 word, up to 4 bytes long = 4 bytes maximum
 8001570:	4b28      	ldr	r3, [pc, #160]	; (8001614 <readSingleRegister+0xb8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f8d3 3072 	ldr.w	r3, [r3, #114]	; 0x72
 8001578:	3304      	adds	r3, #4
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
	adcConfM->rxBuf[4] = 0;
 800157e:	4b25      	ldr	r3, [pc, #148]	; (8001614 <readSingleRegister+0xb8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f8d3 306e 	ldr.w	r3, [r3, #110]	; 0x6e
 8001586:	3304      	adds	r3, #4
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
#endif
    uint16_t opcode = OPCODE_RREG | (((uint16_t) address) << 7);
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	01db      	lsls	r3, r3, #7
 8001590:	b21a      	sxth	r2, r3
 8001592:	4b21      	ldr	r3, [pc, #132]	; (8001618 <readSingleRegister+0xbc>)
 8001594:	4313      	orrs	r3, r2
 8001596:	b21b      	sxth	r3, r3
 8001598:	b29b      	uxth	r3, r3
 800159a:	81bb      	strh	r3, [r7, #12]
    uint8_t numberOfBytes = buildSPIarray(&opcode, 1, adcConfM->txBuf);
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <readSingleRegister+0xb8>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f8d3 2072 	ldr.w	r2, [r3, #114]	; 0x72
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	2101      	movs	r1, #1
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 fcb8 	bl	8001f20 <buildSPIarray>
 80015b0:	4603      	mov	r3, r0
 80015b2:	73fb      	strb	r3, [r7, #15]

    /* Set the nCS pin LOW */
    ADS131M08_control_cs_signal(RESET_SIGNAL);
 80015b4:	2000      	movs	r0, #0
 80015b6:	f000 f8eb 	bl	8001790 <ADS131M08_control_cs_signal>

	// [FRAME 1] Send RREG command
    HAL_SPI_TransmitReceive(adcConfM->hspi, adcConfM->txBuf, adcConfM->rxBuf, numberOfBytes, SPI_DEFAULT_TIMEOUT);
 80015ba:	4b16      	ldr	r3, [pc, #88]	; (8001614 <readSingleRegister+0xb8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <readSingleRegister+0xb8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f8d3 1072 	ldr.w	r1, [r3, #114]	; 0x72
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <readSingleRegister+0xb8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f8d3 206e 	ldr.w	r2, [r3, #110]	; 0x6e
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	2464      	movs	r4, #100	; 0x64
 80015d6:	9400      	str	r4, [sp, #0]
 80015d8:	f002 fe7e 	bl	80042d8 <HAL_SPI_TransmitReceive>

    /* Set the nCS pin HIGH */
    ADS131M08_control_cs_signal(SET_SIGNAL);
 80015dc:	2001      	movs	r0, #1
 80015de:	f000 f8d7 	bl	8001790 <ADS131M08_control_cs_signal>

	// [FRAME 2] Send NULL command to retrieve the register data
    adcConfM->sr.mp[address] = sendCommand(OPCODE_NULL);
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <readSingleRegister+0xb8>)
 80015e4:	681c      	ldr	r4, [r3, #0]
 80015e6:	79fd      	ldrb	r5, [r7, #7]
 80015e8:	2000      	movs	r0, #0
 80015ea:	f000 f883 	bl	80016f4 <sendCommand>
 80015ee:	4603      	mov	r3, r0
 80015f0:	461a      	mov	r2, r3
 80015f2:	006b      	lsls	r3, r5, #1
 80015f4:	4423      	add	r3, r4
 80015f6:	f8a3 2001 	strh.w	r2, [r3, #1]

	return adcConfM->sr.mp[address];
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <readSingleRegister+0xb8>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8001608:	b29b      	uxth	r3, r3
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bdb0      	pop	{r4, r5, r7, pc}
 8001612:	bf00      	nop
 8001614:	20000218 	.word	0x20000218
 8001618:	ffffa000 	.word	0xffffa000

0800161c <writeSingleRegister>:
//!
//! \return None.
//
//*****************************************************************************
void writeSingleRegister(uint8_t address, uint16_t data)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b087      	sub	sp, #28
 8001620:	af02      	add	r7, sp, #8
 8001622:	4603      	mov	r3, r0
 8001624:	460a      	mov	r2, r1
 8001626:	71fb      	strb	r3, [r7, #7]
 8001628:	4613      	mov	r3, r2
 800162a:	80bb      	strh	r3, [r7, #4]
	uint16_t updated_reg = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	81fb      	strh	r3, [r7, #14]

    /* Check that the register address is in range */
    assert(address < NUM_REGISTERS);

    adcConfM->regAddr = address;
 8001630:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <writeSingleRegister+0xd4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	79fa      	ldrb	r2, [r7, #7]
 8001636:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    // (OPTIONAL) Enforce certain register field values when
    // writing to the MODE register to fix the operation mode
    if (MODE_ADDRESS == address)
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d105      	bne.n	800164c <writeSingleRegister+0x30>
    {
        data = enforce_selected_device_modes(data);
 8001640:	88bb      	ldrh	r3, [r7, #4]
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fcbc 	bl	8001fc0 <enforce_selected_device_modes>
 8001648:	4603      	mov	r3, r0
 800164a:	80bb      	strh	r3, [r7, #4]
    // Build TX and RX byte array
#ifdef ENABLE_CRC_IN
    adcConfM->txBuf[12] = 0;     // 3 words, up to 4 bytes each = 12 bytes maximum
    adcConfM->rxBuf[12] = 0;
#else
    adcConfM->txBuf[8] = 0;      // 2 words, up to 4 bytes long = 8 bytes maximum
 800164c:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <writeSingleRegister+0xd4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f8d3 3072 	ldr.w	r3, [r3, #114]	; 0x72
 8001654:	3308      	adds	r3, #8
 8001656:	2200      	movs	r2, #0
 8001658:	701a      	strb	r2, [r3, #0]
    adcConfM->rxBuf[8] = 0;
 800165a:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <writeSingleRegister+0xd4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f8d3 306e 	ldr.w	r3, [r3, #110]	; 0x6e
 8001662:	3308      	adds	r3, #8
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
#endif
    uint16_t opcodes[2];
    opcodes[0] = OPCODE_WREG | (((uint16_t) address) << 7);
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	01db      	lsls	r3, r3, #7
 800166c:	b21b      	sxth	r3, r3
 800166e:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8001672:	b21b      	sxth	r3, r3
 8001674:	b29b      	uxth	r3, r3
 8001676:	813b      	strh	r3, [r7, #8]
    opcodes[1] = data;
 8001678:	88bb      	ldrh	r3, [r7, #4]
 800167a:	817b      	strh	r3, [r7, #10]
    uint8_t numberOfBytes = buildSPIarray(&opcodes[0], 2, adcConfM->txBuf);
 800167c:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <writeSingleRegister+0xd4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f8d3 2072 	ldr.w	r2, [r3, #114]	; 0x72
 8001684:	f107 0308 	add.w	r3, r7, #8
 8001688:	2102      	movs	r1, #2
 800168a:	4618      	mov	r0, r3
 800168c:	f000 fc48 	bl	8001f20 <buildSPIarray>
 8001690:	4603      	mov	r3, r0
 8001692:	737b      	strb	r3, [r7, #13]

    /* Set the nCS pin LOW */
    ADS131M08_control_cs_signal(RESET_SIGNAL);
 8001694:	2000      	movs	r0, #0
 8001696:	f000 f87b 	bl	8001790 <ADS131M08_control_cs_signal>

    // Send command
    HAL_SPI_TransmitReceive(adcConfM->hspi, adcConfM->txBuf, adcConfM->rxBuf, numberOfBytes, SPI_DEFAULT_TIMEOUT);
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <writeSingleRegister+0xd4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80016a0:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <writeSingleRegister+0xd4>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f8d3 1072 	ldr.w	r1, [r3, #114]	; 0x72
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <writeSingleRegister+0xd4>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f8d3 206e 	ldr.w	r2, [r3, #110]	; 0x6e
 80016b0:	7b7b      	ldrb	r3, [r7, #13]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	2464      	movs	r4, #100	; 0x64
 80016b6:	9400      	str	r4, [sp, #0]
 80016b8:	f002 fe0e 	bl	80042d8 <HAL_SPI_TransmitReceive>

    /* Set the nCS pin HIGH */
    ADS131M08_control_cs_signal(SET_SIGNAL);
 80016bc:	2001      	movs	r0, #1
 80016be:	f000 f867 	bl	8001790 <ADS131M08_control_cs_signal>


    // (RECOMMENDED) Read back register to confirm register write was successful
    updated_reg = readSingleRegister(address);
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff49 	bl	800155c <readSingleRegister>
 80016ca:	4603      	mov	r3, r0
 80016cc:	81fb      	strh	r3, [r7, #14]

    if (data == updated_reg)
 80016ce:	88ba      	ldrh	r2, [r7, #4]
 80016d0:	89fb      	ldrh	r3, [r7, #14]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d107      	bne.n	80016e6 <writeSingleRegister+0xca>
    {
        // Update internal array
        adcConfM->sr.mp[address] = data;
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <writeSingleRegister+0xd4>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	88ba      	ldrh	r2, [r7, #4]
 80016e2:	f8a3 2001 	strh.w	r2, [r3, #1]
    }

    // NOTE: Enabling the CRC words in the SPI command will NOT prevent an invalid W
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000218 	.word	0x20000218

080016f4 <sendCommand>:
//!
//! \return ADC response byte (typically the STATUS byte).
//
//*****************************************************************************
uint16_t sendCommand(uint16_t opcode)
{
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af02      	add	r7, sp, #8
 80016fa:	4603      	mov	r3, r0
 80016fc:	80fb      	strh	r3, [r7, #6]
    // Build TX and RX byte array
#ifdef ENABLE_CRC_IN
	adcConfM->txBuf[8] = 0;      // 2 words, up to 4 bytes each = 8 bytes maximum
	adcConfM->rxBuf[8] = 0;
#else
	adcConfM->txBuf[4] = 0;      // 1 word, up to 4 bytes long = 4 bytes maximum
 80016fe:	4b23      	ldr	r3, [pc, #140]	; (800178c <sendCommand+0x98>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f8d3 3072 	ldr.w	r3, [r3, #114]	; 0x72
 8001706:	3304      	adds	r3, #4
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
	adcConfM->rxBuf[4] = 0;
 800170c:	4b1f      	ldr	r3, [pc, #124]	; (800178c <sendCommand+0x98>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f8d3 306e 	ldr.w	r3, [r3, #110]	; 0x6e
 8001714:	3304      	adds	r3, #4
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
#endif
    uint8_t numberOfBytes = buildSPIarray(&opcode, 1, adcConfM->txBuf);
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <sendCommand+0x98>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f8d3 2072 	ldr.w	r2, [r3, #114]	; 0x72
 8001722:	1dbb      	adds	r3, r7, #6
 8001724:	2101      	movs	r1, #1
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fbfa 	bl	8001f20 <buildSPIarray>
 800172c:	4603      	mov	r3, r0
 800172e:	73fb      	strb	r3, [r7, #15]

    /* Set the nCS pin LOW */
    ADS131M08_control_cs_signal(RESET_SIGNAL);
 8001730:	2000      	movs	r0, #0
 8001732:	f000 f82d 	bl	8001790 <ADS131M08_control_cs_signal>

    HAL_SPI_TransmitReceive(adcConfM->hspi, adcConfM->txBuf, adcConfM->rxBuf, numberOfBytes, SPI_DEFAULT_TIMEOUT);
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <sendCommand+0x98>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800173c:	4b13      	ldr	r3, [pc, #76]	; (800178c <sendCommand+0x98>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f8d3 1072 	ldr.w	r1, [r3, #114]	; 0x72
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <sendCommand+0x98>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8d3 206e 	ldr.w	r2, [r3, #110]	; 0x6e
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	b29b      	uxth	r3, r3
 8001750:	2464      	movs	r4, #100	; 0x64
 8001752:	9400      	str	r4, [sp, #0]
 8001754:	f002 fdc0 	bl	80042d8 <HAL_SPI_TransmitReceive>

    /* Set the nCS pin HIGH */
    ADS131M08_control_cs_signal(SET_SIGNAL);
 8001758:	2001      	movs	r0, #1
 800175a:	f000 f819 	bl	8001790 <ADS131M08_control_cs_signal>

    // Combine response bytes and return as a 16-bit word
    uint16_t adcResponse = combineBytes(adcConfM->rxBuf[0], adcConfM->rxBuf[1]);
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <sendCommand+0x98>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f8d3 306e 	ldr.w	r3, [r3, #110]	; 0x6e
 8001766:	781a      	ldrb	r2, [r3, #0]
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <sendCommand+0x98>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f8d3 306e 	ldr.w	r3, [r3, #110]	; 0x6e
 8001770:	3301      	adds	r3, #1
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	4610      	mov	r0, r2
 8001778:	f000 fbbc 	bl	8001ef4 <combineBytes>
 800177c:	4603      	mov	r3, r0
 800177e:	81bb      	strh	r3, [r7, #12]
    return adcResponse;
 8001780:	89bb      	ldrh	r3, [r7, #12]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	bd90      	pop	{r4, r7, pc}
 800178a:	bf00      	nop
 800178c:	20000218 	.word	0x20000218

08001790 <ADS131M08_control_cs_signal>:




void ADS131M08_control_cs_signal(_signalState onOff)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
    if(onOff == SET_SIGNAL)
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d10d      	bne.n	80017bc <ADS131M08_control_cs_signal+0x2c>
    {
            HAL_GPIO_WritePin(adcConfM->cs.port, adcConfM->cs.pin, GPIO_PIN_SET);
 80017a0:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <ADS131M08_control_cs_signal+0x54>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f8d3 0062 	ldr.w	r0, [r3, #98]	; 0x62
 80017a8:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <ADS131M08_control_cs_signal+0x54>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	2201      	movs	r2, #1
 80017b4:	4619      	mov	r1, r3
 80017b6:	f001 fed4 	bl	8003562 <HAL_GPIO_WritePin>
    }
    else
    {
        // Do Nothing
    }
}
 80017ba:	e00f      	b.n	80017dc <ADS131M08_control_cs_signal+0x4c>
    else if(onOff == RESET_SIGNAL)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d10c      	bne.n	80017dc <ADS131M08_control_cs_signal+0x4c>
            HAL_GPIO_WritePin(adcConfM->cs.port, adcConfM->cs.pin, GPIO_PIN_RESET);
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <ADS131M08_control_cs_signal+0x54>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f8d3 0062 	ldr.w	r0, [r3, #98]	; 0x62
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <ADS131M08_control_cs_signal+0x54>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	2200      	movs	r2, #0
 80017d6:	4619      	mov	r1, r3
 80017d8:	f001 fec3 	bl	8003562 <HAL_GPIO_WritePin>
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000218 	.word	0x20000218

080017e8 <ADS131M08_read_cs_signal>:


GPIO_PinState ADS131M08_read_cs_signal()
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(adcConfM->cs.port, adcConfM->cs.pin);
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <ADS131M08_read_cs_signal+0x24>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f8d3 2062 	ldr.w	r2, [r3, #98]	; 0x62
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <ADS131M08_read_cs_signal+0x24>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	4619      	mov	r1, r3
 8001800:	4610      	mov	r0, r2
 8001802:	f001 fe97 	bl	8003534 <HAL_GPIO_ReadPin>
 8001806:	4603      	mov	r3, r0
}
 8001808:	4618      	mov	r0, r3
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000218 	.word	0x20000218

08001810 <restoreRegisterDefaults>:
//!
//! \return None.
//
//*****************************************************************************
void restoreRegisterDefaults(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
	 adcConfM->sr.mp[ID_ADDRESS]             =   0x00;               /* NOTE: This a read-only register */
 8001814:	4b9e      	ldr	r3, [pc, #632]	; (8001a90 <restoreRegisterDefaults+0x280>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2200      	movs	r2, #0
 800181a:	705a      	strb	r2, [r3, #1]
 800181c:	2200      	movs	r2, #0
 800181e:	709a      	strb	r2, [r3, #2]
	 adcConfM->sr.mp[STATUS_ADDRESS]         =   STATUS_DEFAULT;
 8001820:	4b9b      	ldr	r3, [pc, #620]	; (8001a90 <restoreRegisterDefaults+0x280>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2200      	movs	r2, #0
 8001826:	70da      	strb	r2, [r3, #3]
 8001828:	2200      	movs	r2, #0
 800182a:	f042 0205 	orr.w	r2, r2, #5
 800182e:	711a      	strb	r2, [r3, #4]
	 adcConfM->sr.mp[MODE_ADDRESS]           =   MODE_DEFAULT;
 8001830:	4b97      	ldr	r3, [pc, #604]	; (8001a90 <restoreRegisterDefaults+0x280>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2200      	movs	r2, #0
 8001836:	f042 0210 	orr.w	r2, r2, #16
 800183a:	715a      	strb	r2, [r3, #5]
 800183c:	2200      	movs	r2, #0
 800183e:	f042 0205 	orr.w	r2, r2, #5
 8001842:	719a      	strb	r2, [r3, #6]
	 adcConfM->sr.mp[CLOCK_ADDRESS]          =   CLOCK_DEFAULT;
 8001844:	4b92      	ldr	r3, [pc, #584]	; (8001a90 <restoreRegisterDefaults+0x280>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2200      	movs	r2, #0
 800184a:	f042 020e 	orr.w	r2, r2, #14
 800184e:	71da      	strb	r2, [r3, #7]
 8001850:	2200      	movs	r2, #0
 8001852:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8001856:	721a      	strb	r2, [r3, #8]
	 adcConfM->sr.mp[GAIN1_ADDRESS]          =   GAIN1_DEFAULT;
 8001858:	4b8d      	ldr	r3, [pc, #564]	; (8001a90 <restoreRegisterDefaults+0x280>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2200      	movs	r2, #0
 800185e:	725a      	strb	r2, [r3, #9]
 8001860:	2200      	movs	r2, #0
 8001862:	729a      	strb	r2, [r3, #10]
	 adcConfM->sr.mp[GAIN2_ADDRESS]          =   GAIN2_DEFAULT;
 8001864:	4b8a      	ldr	r3, [pc, #552]	; (8001a90 <restoreRegisterDefaults+0x280>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2200      	movs	r2, #0
 800186a:	72da      	strb	r2, [r3, #11]
 800186c:	2200      	movs	r2, #0
 800186e:	731a      	strb	r2, [r3, #12]
	 adcConfM->sr.mp[CFG_ADDRESS]            =   CFG_DEFAULT;
 8001870:	4b87      	ldr	r3, [pc, #540]	; (8001a90 <restoreRegisterDefaults+0x280>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2200      	movs	r2, #0
 8001876:	735a      	strb	r2, [r3, #13]
 8001878:	2200      	movs	r2, #0
 800187a:	f042 0206 	orr.w	r2, r2, #6
 800187e:	739a      	strb	r2, [r3, #14]
	 adcConfM->sr.mp[THRSHLD_MSB_ADDRESS]    =   THRSHLD_MSB_DEFAULT;
 8001880:	4b83      	ldr	r3, [pc, #524]	; (8001a90 <restoreRegisterDefaults+0x280>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2200      	movs	r2, #0
 8001886:	73da      	strb	r2, [r3, #15]
 8001888:	2200      	movs	r2, #0
 800188a:	741a      	strb	r2, [r3, #16]
	 adcConfM->sr.mp[THRSHLD_LSB_ADDRESS]    =   THRSHLD_LSB_DEFAULT;
 800188c:	4b80      	ldr	r3, [pc, #512]	; (8001a90 <restoreRegisterDefaults+0x280>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2200      	movs	r2, #0
 8001892:	745a      	strb	r2, [r3, #17]
 8001894:	2200      	movs	r2, #0
 8001896:	749a      	strb	r2, [r3, #18]
	 adcConfM->sr.mp[CH0_CFG_ADDRESS]        =   CH0_CFG_DEFAULT;
 8001898:	4b7d      	ldr	r3, [pc, #500]	; (8001a90 <restoreRegisterDefaults+0x280>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2200      	movs	r2, #0
 800189e:	74da      	strb	r2, [r3, #19]
 80018a0:	2200      	movs	r2, #0
 80018a2:	751a      	strb	r2, [r3, #20]
	 adcConfM->sr.mp[CH0_OCAL_MSB_ADDRESS]   =   CH0_OCAL_MSB_DEFAULT;
 80018a4:	4b7a      	ldr	r3, [pc, #488]	; (8001a90 <restoreRegisterDefaults+0x280>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2200      	movs	r2, #0
 80018aa:	755a      	strb	r2, [r3, #21]
 80018ac:	2200      	movs	r2, #0
 80018ae:	759a      	strb	r2, [r3, #22]
	 adcConfM->sr.mp[CH0_OCAL_LSB_ADDRESS]   =   CH0_OCAL_LSB_DEFAULT;
 80018b0:	4b77      	ldr	r3, [pc, #476]	; (8001a90 <restoreRegisterDefaults+0x280>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2200      	movs	r2, #0
 80018b6:	75da      	strb	r2, [r3, #23]
 80018b8:	2200      	movs	r2, #0
 80018ba:	761a      	strb	r2, [r3, #24]
	 adcConfM->sr.mp[CH0_GCAL_MSB_ADDRESS]   =   CH0_GCAL_MSB_DEFAULT;
 80018bc:	4b74      	ldr	r3, [pc, #464]	; (8001a90 <restoreRegisterDefaults+0x280>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2200      	movs	r2, #0
 80018c2:	765a      	strb	r2, [r3, #25]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018ca:	769a      	strb	r2, [r3, #26]
	 adcConfM->sr.mp[CH0_GCAL_LSB_ADDRESS]   =   CH0_GCAL_LSB_DEFAULT;
 80018cc:	4b70      	ldr	r3, [pc, #448]	; (8001a90 <restoreRegisterDefaults+0x280>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2200      	movs	r2, #0
 80018d2:	76da      	strb	r2, [r3, #27]
 80018d4:	2200      	movs	r2, #0
 80018d6:	771a      	strb	r2, [r3, #28]
#if (CHANNEL_COUNT > 1)
	 adcConfM->sr.mp[CH1_CFG_ADDRESS]        =   CH1_CFG_DEFAULT;
 80018d8:	4b6d      	ldr	r3, [pc, #436]	; (8001a90 <restoreRegisterDefaults+0x280>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2200      	movs	r2, #0
 80018de:	775a      	strb	r2, [r3, #29]
 80018e0:	2200      	movs	r2, #0
 80018e2:	779a      	strb	r2, [r3, #30]
	 adcConfM->sr.mp[CH1_OCAL_MSB_ADDRESS]   =   CH1_OCAL_MSB_DEFAULT;
 80018e4:	4b6a      	ldr	r3, [pc, #424]	; (8001a90 <restoreRegisterDefaults+0x280>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2200      	movs	r2, #0
 80018ea:	77da      	strb	r2, [r3, #31]
 80018ec:	2200      	movs	r2, #0
 80018ee:	f883 2020 	strb.w	r2, [r3, #32]
	 adcConfM->sr.mp[CH1_OCAL_LSB_ADDRESS]   =   CH1_OCAL_LSB_DEFAULT;
 80018f2:	4b67      	ldr	r3, [pc, #412]	; (8001a90 <restoreRegisterDefaults+0x280>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	 adcConfM->sr.mp[CH1_GCAL_MSB_ADDRESS]   =   CH1_GCAL_MSB_DEFAULT;
 8001902:	4b63      	ldr	r3, [pc, #396]	; (8001a90 <restoreRegisterDefaults+0x280>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 800190c:	2200      	movs	r2, #0
 800190e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	 adcConfM->sr.mp[CH1_GCAL_LSB_ADDRESS]   =   CH1_GCAL_LSB_DEFAULT;
 8001916:	4b5e      	ldr	r3, [pc, #376]	; (8001a90 <restoreRegisterDefaults+0x280>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
#endif
#if (CHANNEL_COUNT > 2)
	 adcConfM->sr.mp[CH2_CFG_ADDRESS]        =   CH2_CFG_DEFAULT;
 8001926:	4b5a      	ldr	r3, [pc, #360]	; (8001a90 <restoreRegisterDefaults+0x280>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	 adcConfM->sr.mp[CH2_OCAL_MSB_ADDRESS]   =   CH2_OCAL_MSB_DEFAULT;
 8001936:	4b56      	ldr	r3, [pc, #344]	; (8001a90 <restoreRegisterDefaults+0x280>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8001940:	2200      	movs	r2, #0
 8001942:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	 adcConfM->sr.mp[CH2_OCAL_LSB_ADDRESS]   =   CH2_OCAL_LSB_DEFAULT;
 8001946:	4b52      	ldr	r3, [pc, #328]	; (8001a90 <restoreRegisterDefaults+0x280>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8001950:	2200      	movs	r2, #0
 8001952:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	 adcConfM->sr.mp[CH2_GCAL_MSB_ADDRESS]   =   CH2_GCAL_MSB_DEFAULT;
 8001956:	4b4e      	ldr	r3, [pc, #312]	; (8001a90 <restoreRegisterDefaults+0x280>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8001960:	2200      	movs	r2, #0
 8001962:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001966:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	 adcConfM->sr.mp[CH2_GCAL_LSB_ADDRESS]   =   CH2_GCAL_LSB_DEFAULT;
 800196a:	4b49      	ldr	r3, [pc, #292]	; (8001a90 <restoreRegisterDefaults+0x280>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
#endif
#if (CHANNEL_COUNT > 3)
	 adcConfM->sr.mp[CH3_CFG_ADDRESS]        =   CH3_CFG_DEFAULT;
 800197a:	4b45      	ldr	r3, [pc, #276]	; (8001a90 <restoreRegisterDefaults+0x280>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	 adcConfM->sr.mp[CH3_OCAL_MSB_ADDRESS]   =   CH3_OCAL_MSB_DEFAULT;
 800198a:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <restoreRegisterDefaults+0x280>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	 adcConfM->sr.mp[CH3_OCAL_LSB_ADDRESS]   =   CH3_OCAL_LSB_DEFAULT;
 800199a:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <restoreRegisterDefaults+0x280>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	 adcConfM->sr.mp[CH3_GCAL_MSB_ADDRESS]   =   CH3_GCAL_MSB_DEFAULT;
 80019aa:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <restoreRegisterDefaults+0x280>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80019b4:	2200      	movs	r2, #0
 80019b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80019ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	 adcConfM->sr.mp[CH3_GCAL_LSB_ADDRESS]   =   CH3_GCAL_LSB_DEFAULT;
 80019be:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <restoreRegisterDefaults+0x280>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#endif
#if (CHANNEL_COUNT > 4)
	 adcConfM->sr.mp[CH4_CFG_ADDRESS]        =   CH4_CFG_DEFAULT;
 80019ce:	4b30      	ldr	r3, [pc, #192]	; (8001a90 <restoreRegisterDefaults+0x280>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	 adcConfM->sr.mp[CH4_OCAL_MSB_ADDRESS]   =   CH4_OCAL_MSB_DEFAULT;
 80019de:	4b2c      	ldr	r3, [pc, #176]	; (8001a90 <restoreRegisterDefaults+0x280>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	 adcConfM->sr.mp[CH4_OCAL_LSB_ADDRESS]   =   CH4_OCAL_LSB_DEFAULT;
 80019ee:	4b28      	ldr	r3, [pc, #160]	; (8001a90 <restoreRegisterDefaults+0x280>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	 adcConfM->sr.mp[CH4_GCAL_MSB_ADDRESS]   =   CH4_GCAL_MSB_DEFAULT;
 80019fe:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <restoreRegisterDefaults+0x280>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	 adcConfM->sr.mp[CH4_GCAL_LSB_ADDRESS]   =   CH4_GCAL_LSB_DEFAULT;
 8001a12:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <restoreRegisterDefaults+0x280>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif
#if (CHANNEL_COUNT > 5)
	 adcConfM->sr.mp[CH5_CFG_ADDRESS]        =   CH5_CFG_DEFAULT;
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <restoreRegisterDefaults+0x280>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	 adcConfM->sr.mp[CH5_OCAL_MSB_ADDRESS]   =   CH5_OCAL_MSB_DEFAULT;
 8001a32:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <restoreRegisterDefaults+0x280>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	 adcConfM->sr.mp[CH5_OCAL_LSB_ADDRESS]   =   CH5_OCAL_LSB_DEFAULT;
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <restoreRegisterDefaults+0x280>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	 adcConfM->sr.mp[CH5_GCAL_MSB_ADDRESS]   =   CH5_GCAL_MSB_DEFAULT;
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <restoreRegisterDefaults+0x280>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001a62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	 adcConfM->sr.mp[CH5_GCAL_LSB_ADDRESS]   =   CH5_GCAL_LSB_DEFAULT;
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <restoreRegisterDefaults+0x280>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	 adcConfM->sr.mp[CH7_OCAL_MSB_ADDRESS]   =   CH7_OCAL_MSB_DEFAULT;
	 adcConfM->sr.mp[CH7_OCAL_LSB_ADDRESS]   =   CH7_OCAL_LSB_DEFAULT;
	 adcConfM->sr.mp[CH7_GCAL_MSB_ADDRESS]   =   CH7_GCAL_MSB_DEFAULT;
	 adcConfM->sr.mp[CH7_GCAL_LSB_ADDRESS]   =   CH7_GCAL_LSB_DEFAULT;
#endif
	 adcConfM->sr.mp[REGMAP_CRC_ADDRESS]     =   REGMAP_CRC_DEFAULT;
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <restoreRegisterDefaults+0x280>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
}
 8001a86:	bf00      	nop
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bc80      	pop	{r7}
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000218 	.word	0x20000218

08001a94 <ADS131M08_receive_data>:
// Helper functions
//
//****************************************************************************

HAL_StatusTypeDef ADS131M08_receive_data()
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef result=HAL_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	71fb      	strb	r3, [r7, #7]

	// Wait until cs pin is reset to send data
	if(GPIO_PIN_RESET == ADS131M08_read_cs_signal())
 8001a9e:	f7ff fea3 	bl	80017e8 <ADS131M08_read_cs_signal>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <ADS131M08_receive_data+0x18>
	{
		return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e01f      	b.n	8001aec <ADS131M08_receive_data+0x58>
	}

    ADS131M08_control_cs_signal(RESET_SIGNAL);
 8001aac:	2000      	movs	r0, #0
 8001aae:	f7ff fe6f 	bl	8001790 <ADS131M08_control_cs_signal>
    //result = HAL_SPI_Receive_IT(adcConfM->hspi, adcConfM->rxBuf, adcConfM->bufLen);
    result = HAL_SPI_Receive(adcConfM->hspi, adcConfM->rxBuf, adcConfM->bufLen, 50);
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <ADS131M08_receive_data+0x60>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <ADS131M08_receive_data+0x60>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f8d3 106e 	ldr.w	r1, [r3, #110]	; 0x6e
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <ADS131M08_receive_data+0x60>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	2332      	movs	r3, #50	; 0x32
 8001acc:	f002 faec 	bl	80040a8 <HAL_SPI_Receive>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	71fb      	strb	r3, [r7, #7]

    if (result != HAL_OK)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d004      	beq.n	8001ae4 <ADS131M08_receive_data+0x50>
    {
        ADS131M08_control_cs_signal(SET_SIGNAL);
 8001ada:	2001      	movs	r0, #1
 8001adc:	f7ff fe58 	bl	8001790 <ADS131M08_control_cs_signal>
    	return result;
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	e003      	b.n	8001aec <ADS131M08_receive_data+0x58>
    }

    ADS131M08_control_cs_signal(SET_SIGNAL);
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f7ff fe53 	bl	8001790 <ADS131M08_control_cs_signal>
    return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000218 	.word	0x20000218

08001af8 <upperByte>:
//!
//! \return 8-bit most-significant byte.
//
//*****************************************************************************
uint8_t upperByte(uint16_t uint16_Word)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	80fb      	strh	r3, [r7, #6]
    uint8_t msByte;
    msByte = (uint8_t) ((uint16_Word >> 8) & 0x00FF);
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	73fb      	strb	r3, [r7, #15]

    return msByte;
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <lowerByte>:
//!
//! \return 8-bit least-significant byte.
//
//*****************************************************************************
uint8_t lowerByte(uint16_t uint16_Word)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	80fb      	strh	r3, [r7, #6]
    uint8_t lsByte;
    lsByte = (uint8_t) (uint16_Word & 0x00FF);
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	73fb      	strb	r3, [r7, #15]

    return lsByte;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3714      	adds	r7, #20
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <ADS131M08_convert_adc_data>:

uint32_t ADS131M08_convert_adc_data(const uint8_t* dataBuf)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
    uint32_t upperByte;
    uint32_t middleByte;
    uint32_t lowerByte;

    // The output data extends to 32 bits with eight zeroes(0b00000000, 1Byte) added to the least significant bits when using the 32-bit device word length setting, datasheet 38p
    upperByte    = ((uint32_t) dataBuf[0] << 16);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	041b      	lsls	r3, r3, #16
 8001b3e:	617b      	str	r3, [r7, #20]
    middleByte   = ((uint32_t) dataBuf[1] << 8);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3301      	adds	r3, #1
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	613b      	str	r3, [r7, #16]
    lowerByte  = ((uint32_t) dataBuf[2] << 0);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	60fb      	str	r3, [r7, #12]

    return (upperByte | middleByte | lowerByte);
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	431a      	orrs	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
	...

08001b68 <ADS131M08_parse_adc_data>:


void ADS131M08_parse_adc_data()
{
 8001b68:	b5b0      	push	{r4, r5, r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
    uint8_t index;

    adcConfM->response = combineBytes(adcConfM->rxBuf[0], adcConfM->rxBuf[1]);
 8001b6e:	4bbb      	ldr	r3, [pc, #748]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f8d3 306e 	ldr.w	r3, [r3, #110]	; 0x6e
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	4bb8      	ldr	r3, [pc, #736]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f8d3 306e 	ldr.w	r3, [r3, #110]	; 0x6e
 8001b80:	3301      	adds	r3, #1
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	49b5      	ldr	r1, [pc, #724]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001b86:	680c      	ldr	r4, [r1, #0]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	f000 f9b2 	bl	8001ef4 <combineBytes>
 8001b90:	4603      	mov	r3, r0
 8001b92:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56

	for(adcConfM->ch = ADC_CH1, index = 1; adcConfM->ch < NUMB_ADC_CH; adcConfM->ch++, index++)
 8001b96:	4bb1      	ldr	r3, [pc, #708]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	71fb      	strb	r3, [r7, #7]
 8001ba4:	e16d      	b.n	8001e82 <ADS131M08_parse_adc_data+0x31a>
	{
		if ( adcConfM->chData[adcConfM->ch].average_counter < CHANNEL_OVERSAMPLING )
 8001ba6:	4bad      	ldr	r3, [pc, #692]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	4bac      	ldr	r3, [pc, #688]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	1a5b      	subs	r3, r3, r1
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	337b      	adds	r3, #123	; 0x7b
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b17      	cmp	r3, #23
 8001bc4:	f200 80a5 	bhi.w	8001d12 <ADS131M08_parse_adc_data+0x1aa>
		{
			adcConfM->chData[adcConfM->ch].r = ADS131M08_convert_adc_data(&adcConfM->rxBuf[index * M08_WORD_LENGTH]);
 8001bc8:	4ba4      	ldr	r3, [pc, #656]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f8d3 106e 	ldr.w	r1, [r3, #110]	; 0x6e
 8001bd0:	79fa      	ldrb	r2, [r7, #7]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	18ca      	adds	r2, r1, r3
 8001bda:	4ba0      	ldr	r3, [pc, #640]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001bdc:	681c      	ldr	r4, [r3, #0]
 8001bde:	4b9f      	ldr	r3, [pc, #636]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8001be6:	461d      	mov	r5, r3
 8001be8:	4610      	mov	r0, r2
 8001bea:	f7ff ffa1 	bl	8001b30 <ADS131M08_convert_adc_data>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	462b      	mov	r3, r5
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	1b5b      	subs	r3, r3, r5
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4423      	add	r3, r4
 8001bfa:	3370      	adds	r3, #112	; 0x70
 8001bfc:	60da      	str	r2, [r3, #12]

			if ( adcConfM->chData[adcConfM->ch].r & 0x800000)
 8001bfe:	4b97      	ldr	r3, [pc, #604]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	4b96      	ldr	r3, [pc, #600]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	1a5b      	subs	r3, r3, r1
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	4413      	add	r3, r2
 8001c16:	3370      	adds	r3, #112	; 0x70
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d030      	beq.n	8001c84 <ADS131M08_parse_adc_data+0x11c>
			{
				adcConfM->chData[adcConfM->ch].average -= ((0xFFFFFF - adcConfM->chData[adcConfM->ch].r) +1);
 8001c22:	4b8e      	ldr	r3, [pc, #568]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	4b8d      	ldr	r3, [pc, #564]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8001c2e:	4619      	mov	r1, r3
 8001c30:	460b      	mov	r3, r1
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	1a5b      	subs	r3, r3, r1
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	3370      	adds	r3, #112	; 0x70
 8001c3c:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8001c40:	4618      	mov	r0, r3
 8001c42:	4b86      	ldr	r3, [pc, #536]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	4b85      	ldr	r3, [pc, #532]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8001c4e:	4619      	mov	r1, r3
 8001c50:	460b      	mov	r3, r1
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	1a5b      	subs	r3, r3, r1
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	3370      	adds	r3, #112	; 0x70
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	4403      	add	r3, r0
 8001c60:	f103 407f 	add.w	r0, r3, #4278190080	; 0xff000000
 8001c64:	4b7d      	ldr	r3, [pc, #500]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b7c      	ldr	r3, [pc, #496]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8001c70:	4619      	mov	r1, r3
 8001c72:	460b      	mov	r3, r1
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	1a5b      	subs	r3, r3, r1
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	3370      	adds	r3, #112	; 0x70
 8001c7e:	f8c3 0007 	str.w	r0, [r3, #7]
 8001c82:	e02d      	b.n	8001ce0 <ADS131M08_parse_adc_data+0x178>
			}
			else
			{
				adcConfM->chData[adcConfM->ch].average += adcConfM->chData[adcConfM->ch].r;
 8001c84:	4b75      	ldr	r3, [pc, #468]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b74      	ldr	r3, [pc, #464]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8001c90:	4619      	mov	r1, r3
 8001c92:	460b      	mov	r3, r1
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	1a5b      	subs	r3, r3, r1
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3370      	adds	r3, #112	; 0x70
 8001c9e:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	4b6d      	ldr	r3, [pc, #436]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4b6c      	ldr	r3, [pc, #432]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	00db      	lsls	r3, r3, #3
 8001cb6:	1a5b      	subs	r3, r3, r1
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4413      	add	r3, r2
 8001cbc:	3370      	adds	r3, #112	; 0x70
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	4418      	add	r0, r3
 8001cc2:	4b66      	ldr	r3, [pc, #408]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	4b65      	ldr	r3, [pc, #404]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8001cce:	4619      	mov	r1, r3
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	1a5b      	subs	r3, r3, r1
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	3370      	adds	r3, #112	; 0x70
 8001cdc:	f8c3 0007 	str.w	r0, [r3, #7]
			}

			adcConfM->chData[adcConfM->ch].average_counter ++;
 8001ce0:	4b5e      	ldr	r3, [pc, #376]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001ce2:	6819      	ldr	r1, [r3, #0]
 8001ce4:	4b5d      	ldr	r3, [pc, #372]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8001cec:	461a      	mov	r2, r3
 8001cee:	4613      	mov	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	1a9b      	subs	r3, r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	440b      	add	r3, r1
 8001cf8:	337b      	adds	r3, #123	; 0x7b
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	b2d8      	uxtb	r0, r3
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	1a9b      	subs	r3, r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	440b      	add	r3, r1
 8001d0a:	337b      	adds	r3, #123	; 0x7b
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	701a      	strb	r2, [r3, #0]
 8001d10:	e0ac      	b.n	8001e6c <ADS131M08_parse_adc_data+0x304>
		}
		else
		{
			adcConfM->chData[adcConfM->ch].average /= CHANNEL_OVERSAMPLING;
 8001d12:	4b52      	ldr	r3, [pc, #328]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4b51      	ldr	r3, [pc, #324]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8001d1e:	4619      	mov	r1, r3
 8001d20:	460b      	mov	r3, r1
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	1a5b      	subs	r3, r3, r1
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4413      	add	r3, r2
 8001d2a:	3370      	adds	r3, #112	; 0x70
 8001d2c:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8001d30:	4a4a      	ldr	r2, [pc, #296]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001d32:	6811      	ldr	r1, [r2, #0]
 8001d34:	4a49      	ldr	r2, [pc, #292]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	f892 20cb 	ldrb.w	r2, [r2, #203]	; 0xcb
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	4a48      	ldr	r2, [pc, #288]	; (8001e60 <ADS131M08_parse_adc_data+0x2f8>)
 8001d40:	fb82 4203 	smull	r4, r2, r2, r3
 8001d44:	1092      	asrs	r2, r2, #2
 8001d46:	17db      	asrs	r3, r3, #31
 8001d48:	1ad2      	subs	r2, r2, r3
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	1a1b      	subs	r3, r3, r0
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	440b      	add	r3, r1
 8001d54:	3370      	adds	r3, #112	; 0x70
 8001d56:	f8c3 2007 	str.w	r2, [r3, #7]
			adcConfM->chData[adcConfM->ch].average_counter = 0;
 8001d5a:	4b40      	ldr	r3, [pc, #256]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4b3f      	ldr	r3, [pc, #252]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8001d66:	4619      	mov	r1, r3
 8001d68:	460b      	mov	r3, r1
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	1a5b      	subs	r3, r3, r1
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	337b      	adds	r3, #123	; 0x7b
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]

			switch (adcConfM->chData[adcConfM->ch].measure_type )
 8001d78:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b37      	ldr	r3, [pc, #220]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8001d84:	4619      	mov	r1, r3
 8001d86:	460b      	mov	r3, r1
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	1a5b      	subs	r3, r3, r1
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	3384      	adds	r3, #132	; 0x84
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <ADS131M08_parse_adc_data+0x236>
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d022      	beq.n	8001de2 <ADS131M08_parse_adc_data+0x27a>
				case VOLTAGE_MV_FLOAT:
					 adcConfM->chData[adcConfM->ch].v = ADS131M08_convert_to_mVolt(adcConfM->chData[adcConfM->ch].average);
					break;

				default:
					break;
 8001d9c:	e043      	b.n	8001e26 <ADS131M08_parse_adc_data+0x2be>
					 adcConfM->chData[adcConfM->ch].v = ADS131M08_convert_to_mAmp(adcConfM->chData[adcConfM->ch].average);
 8001d9e:	4b2f      	ldr	r3, [pc, #188]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	4b2e      	ldr	r3, [pc, #184]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8001daa:	4619      	mov	r1, r3
 8001dac:	460b      	mov	r3, r1
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	1a5b      	subs	r3, r3, r1
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	3370      	adds	r3, #112	; 0x70
 8001db8:	f8d3 2007 	ldr.w	r2, [r3, #7]
 8001dbc:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001dbe:	681c      	ldr	r4, [r3, #0]
 8001dc0:	4b26      	ldr	r3, [pc, #152]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8001dc8:	461d      	mov	r5, r3
 8001dca:	4610      	mov	r0, r2
 8001dcc:	f000 f87c 	bl	8001ec8 <ADS131M08_convert_to_mAmp>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	462b      	mov	r3, r5
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	1b5b      	subs	r3, r3, r5
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4423      	add	r3, r4
 8001ddc:	3378      	adds	r3, #120	; 0x78
 8001dde:	609a      	str	r2, [r3, #8]
					 break;
 8001de0:	e021      	b.n	8001e26 <ADS131M08_parse_adc_data+0x2be>
					 adcConfM->chData[adcConfM->ch].v = ADS131M08_convert_to_mVolt(adcConfM->chData[adcConfM->ch].average);
 8001de2:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8001dee:	4619      	mov	r1, r3
 8001df0:	460b      	mov	r3, r1
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	1a5b      	subs	r3, r3, r1
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	3370      	adds	r3, #112	; 0x70
 8001dfc:	f8d3 2007 	ldr.w	r2, [r3, #7]
 8001e00:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001e02:	681c      	ldr	r4, [r3, #0]
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8001e0c:	461d      	mov	r5, r3
 8001e0e:	4610      	mov	r0, r2
 8001e10:	f000 f844 	bl	8001e9c <ADS131M08_convert_to_mVolt>
 8001e14:	4602      	mov	r2, r0
 8001e16:	462b      	mov	r3, r5
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	1b5b      	subs	r3, r3, r5
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4423      	add	r3, r4
 8001e20:	3378      	adds	r3, #120	; 0x78
 8001e22:	609a      	str	r2, [r3, #8]
					break;
 8001e24:	bf00      	nop
			}
			//Do the things that need to be done
			if (adcConfM->ch >= NUMB_ADC_CH-1)
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	d91c      	bls.n	8001e6c <ADS131M08_parse_adc_data+0x304>
			{
				adcConfM->ch = 0;
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <ADS131M08_parse_adc_data+0x2f4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
				ads131m08_task_scheduler |= ADS131M08_SEND_AGGR_DATA;
 8001e3c:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <ADS131M08_parse_adc_data+0x2fc>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <ADS131M08_parse_adc_data+0x2fc>)
 8001e48:	701a      	strb	r2, [r3, #0]
				main_task_scheduler |= PROCESS_ADS131M08;
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <ADS131M08_parse_adc_data+0x300>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <ADS131M08_parse_adc_data+0x300>)
 8001e56:	701a      	strb	r2, [r3, #0]
				return;
 8001e58:	e01a      	b.n	8001e90 <ADS131M08_parse_adc_data+0x328>
 8001e5a:	bf00      	nop
 8001e5c:	20000218 	.word	0x20000218
 8001e60:	2aaaaaab 	.word	0x2aaaaaab
 8001e64:	2000021c 	.word	0x2000021c
 8001e68:	2000016c 	.word	0x2000016c
	for(adcConfM->ch = ADC_CH1, index = 1; adcConfM->ch < NUMB_ADC_CH; adcConfM->ch++, index++)
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <ADS131M08_parse_adc_data+0x330>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
 8001e74:	3201      	adds	r2, #1
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	71fb      	strb	r3, [r7, #7]
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <ADS131M08_parse_adc_data+0x330>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
 8001e8a:	2b05      	cmp	r3, #5
 8001e8c:	f67f ae8b 	bls.w	8001ba6 <ADS131M08_parse_adc_data+0x3e>
			}
		}
	}
}
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bdb0      	pop	{r4, r5, r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000218 	.word	0x20000218

08001e9c <ADS131M08_convert_to_mVolt>:


float ADS131M08_convert_to_mVolt(int32_t reg)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
    const float unitFS = 345.0f / 8388607.0f; // unit: mV (if unit is V, calculated value is out of 'float' range)
 8001ea4:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <ADS131M08_convert_to_mVolt+0x28>)
 8001ea6:	60fb      	str	r3, [r7, #12]

    // convert register to mVolt
    return (unitFS * (float)reg);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7fe fabd 	bl	8000428 <__aeabi_i2f>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	68f9      	ldr	r1, [r7, #12]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe f94a 	bl	800014c <__aeabi_fmul>
 8001eb8:	4603      	mov	r3, r0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	382c8001 	.word	0x382c8001

08001ec8 <ADS131M08_convert_to_mAmp>:



float ADS131M08_convert_to_mAmp(int32_t reg)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
    const float unitFS = 47000.0f / 8388607.0f; // unit: mV (if unit is V, calculated value is out of 'float' range)
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <ADS131M08_convert_to_mAmp+0x28>)
 8001ed2:	60fb      	str	r3, [r7, #12]

    // convert register to mVolt
    return (float)((float)reg * unitFS);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f7fe faa7 	bl	8000428 <__aeabi_i2f>
 8001eda:	4603      	mov	r3, r0
 8001edc:	68f9      	ldr	r1, [r7, #12]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe f934 	bl	800014c <__aeabi_fmul>
 8001ee4:	4603      	mov	r3, r0
    //return (((float)reg * 4.8f)/8388607.0f );
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	3bb79801 	.word	0x3bb79801

08001ef4 <combineBytes>:
//!
//! \return concatenated 16-bit word.
//
//*****************************************************************************
uint16_t combineBytes(uint8_t upperByte, uint8_t lowerByte)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	460a      	mov	r2, r1
 8001efe:	71fb      	strb	r3, [r7, #7]
 8001f00:	4613      	mov	r3, r2
 8001f02:	71bb      	strb	r3, [r7, #6]
    uint16_t combinedValue;
    combinedValue = ((uint16_t) upperByte << 8) | ((uint16_t) lowerByte);
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	b21a      	sxth	r2, r3
 8001f0a:	79bb      	ldrb	r3, [r7, #6]
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	b21b      	sxth	r3, r3
 8001f12:	81fb      	strh	r3, [r7, #14]

    return combinedValue;
 8001f14:	89fb      	ldrh	r3, [r7, #14]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <buildSPIarray>:
//!
//! \return number of bytes added to byteArray[].
//
//*****************************************************************************
uint8_t buildSPIarray(const uint16_t opcodeArray[], uint8_t numberOpcodes, uint8_t byteArray[])
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	72fb      	strb	r3, [r7, #11]
    /*
     * Frame size = opcode word(s) + optional CRC word
     * Number of bytes per word = 2, 3, or 4
     * Total bytes = bytes per word * number of words
     */
    uint8_t numberWords     = numberOpcodes + (SPI_CRC_ENABLED ? 1 : 0);
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f7ff f8d4 	bl	80010dc <getRegisterValue>
 8001f34:	4603      	mov	r3, r0
 8001f36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	bf14      	ite	ne
 8001f3e:	2301      	movne	r3, #1
 8001f40:	2300      	moveq	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	7afb      	ldrb	r3, [r7, #11]
 8001f48:	4413      	add	r3, r2
 8001f4a:	74fb      	strb	r3, [r7, #19]
    uint8_t bytesPerWord    = getWordByteLength();
 8001f4c:	f000 f858 	bl	8002000 <getWordByteLength>
 8001f50:	4603      	mov	r3, r0
 8001f52:	74bb      	strb	r3, [r7, #18]
    uint8_t numberOfBytes   = numberWords * bytesPerWord;
 8001f54:	7cfb      	ldrb	r3, [r7, #19]
 8001f56:	7cba      	ldrb	r2, [r7, #18]
 8001f58:	fb02 f303 	mul.w	r3, r2, r3
 8001f5c:	747b      	strb	r3, [r7, #17]

    int i;
    for (i = 0; i < numberOpcodes; i++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	e024      	b.n	8001fae <buildSPIarray+0x8e>
    {
        // NOTE: Be careful not to accidentally overflow the array here.
        // The array and opcodes are defined in the calling function, so
        // we are trusting that no mistakes were made in the calling function!
        byteArray[(i*bytesPerWord) + 0] = upperByte(opcodeArray[i]);
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	8819      	ldrh	r1, [r3, #0]
 8001f6e:	7cbb      	ldrb	r3, [r7, #18]
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	fb02 f303 	mul.w	r3, r2, r3
 8001f76:	461a      	mov	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	189c      	adds	r4, r3, r2
 8001f7c:	4608      	mov	r0, r1
 8001f7e:	f7ff fdbb 	bl	8001af8 <upperByte>
 8001f82:	4603      	mov	r3, r0
 8001f84:	7023      	strb	r3, [r4, #0]
        byteArray[(i*bytesPerWord) + 1] = lowerByte(opcodeArray[i]);
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	8819      	ldrh	r1, [r3, #0]
 8001f90:	7cbb      	ldrb	r3, [r7, #18]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	fb02 f303 	mul.w	r3, r2, r3
 8001f98:	3301      	adds	r3, #1
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	18d4      	adds	r4, r2, r3
 8001f9e:	4608      	mov	r0, r1
 8001fa0:	f7ff fdb9 	bl	8001b16 <lowerByte>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < numberOpcodes; i++)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	3301      	adds	r3, #1
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	7afb      	ldrb	r3, [r7, #11]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	dbd6      	blt.n	8001f64 <buildSPIarray+0x44>
    uint16_t crcWord = calculateCRC(&byteArray[0], numberOfBytes, 0xFFFF);
    byteArray[(i*bytesPerWord) + 0] = upperByte(crcWord);
    byteArray[(i*bytesPerWord) + 1] = lowerByte(crcWord);
#endif

    return numberOfBytes;
 8001fb6:	7c7b      	ldrb	r3, [r7, #17]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd90      	pop	{r4, r7, pc}

08001fc0 <enforce_selected_device_modes>:
//!
//! \return uint16_t modified register data.
//
//*****************************************************************************
uint16_t enforce_selected_device_modes(uint16_t data)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	80fb      	strh	r3, [r7, #6]
#ifdef ENABLE_CRC_IN
    // When writing to the MODE register, ensure RX_CRC_EN bit is ALWAYS set
    data |= MODE_RX_CRC_EN_ENABLED;
#else
    // When writing to the MODE register, ensure RX_CRC_EN bit is NEVER set
    data &= ~MODE_RX_CRC_EN_ENABLED;
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fd0:	80fb      	strh	r3, [r7, #6]
    ///////////////////////////////////////////////////////////////////////////
    // Enforce WLENGH setting

#ifdef WORD_LENGTH_24BIT
    // When writing to the MODE register, ensure WLENGTH bits are ALWAYS set to 01b
    data = (data & ~MODE_WLENGTH_MASK) | MODE_WLENGTH_24BIT;
 8001fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	80fb      	strh	r3, [r7, #6]
    ///////////////////////////////////////////////////////////////////////////
    // Enforce DRDY_FMT setting

#ifdef DRDY_FMT_PULSE
    // When writing to the MODE register, ensure DRDY_FMT bit is ALWAYS set
    data = (data & ~MODE_DRDY_FMT_MASK) | MODE_DRDY_FMT_NEG_PULSE_FIXED_WIDTH;
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	80fb      	strh	r3, [r7, #6]
    ///////////////////////////////////////////////////////////////////////////
    // Enforce CRC_TYPE setting

#ifdef CRC_CCITT
    // When writing to the MODE register, ensure CRC_TYPE bit is NEVER set
    data = (data & ~STATUS_CRC_TYPE_MASK) | STATUS_CRC_TYPE_16BIT_CCITT;
 8001fec:	88fb      	ldrh	r3, [r7, #6]
 8001fee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ff2:	80fb      	strh	r3, [r7, #6]
    // When writing to the MODE register, ensure CRC_TYPE bit is ALWAYS set
    data = (data & ~STATUS_CRC_TYPE_MASK) | STATUS_CRC_TYPE_16BIT_ANSI;
#endif

    // Return modified register data
    return data;
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr

08002000 <getWordByteLength>:
//!
//! \return SPI word byte length (2, 3, or 4)
//
//*****************************************************************************
uint8_t getWordByteLength(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
    return wlength_byte_values[WLENGTH];
 8002004:	2002      	movs	r0, #2
 8002006:	f7ff f869 	bl	80010dc <getRegisterValue>
 800200a:	4603      	mov	r3, r0
 800200c:	121b      	asrs	r3, r3, #8
 800200e:	b2db      	uxtb	r3, r3
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	4a01      	ldr	r2, [pc, #4]	; (800201c <getWordByteLength+0x1c>)
 8002016:	5cd3      	ldrb	r3, [r2, r3]
}
 8002018:	4618      	mov	r0, r3
 800201a:	bd80      	pop	{r7, pc}
 800201c:	0800542c 	.word	0x0800542c

08002020 <delay_us>:



void delay_us(uint32_t microseconds)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8002028:	f000 f874 	bl	8002114 <HAL_GetTick>
 800202c:	60f8      	str	r0, [r7, #12]
    uint32_t wait = microseconds * (HAL_RCC_GetHCLKFreq() / 1000000);
 800202e:	f001 fed9 	bl	8003de4 <HAL_RCC_GetHCLKFreq>
 8002032:	4603      	mov	r3, r0
 8002034:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <delay_us+0x40>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	0c9a      	lsrs	r2, r3, #18
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	60bb      	str	r3, [r7, #8]

    while ((HAL_GetTick() - tickstart) < wait);
 8002044:	bf00      	nop
 8002046:	f000 f865 	bl	8002114 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	68ba      	ldr	r2, [r7, #8]
 8002052:	429a      	cmp	r2, r3
 8002054:	d8f7      	bhi.n	8002046 <delay_us+0x26>
}
 8002056:	bf00      	nop
 8002058:	bf00      	nop
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	431bde83 	.word	0x431bde83

08002064 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <HAL_Init+0x28>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a07      	ldr	r2, [pc, #28]	; (800208c <HAL_Init+0x28>)
 800206e:	f043 0310 	orr.w	r3, r3, #16
 8002072:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002074:	2003      	movs	r0, #3
 8002076:	f001 f803 	bl	8003080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800207a:	200f      	movs	r0, #15
 800207c:	f000 f808 	bl	8002090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002080:	f7fe fecc 	bl	8000e1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40022000 	.word	0x40022000

08002090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_InitTick+0x54>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <HAL_InitTick+0x58>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	4619      	mov	r1, r3
 80020a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f001 f81b 	bl	80030ea <HAL_SYSTICK_Config>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00e      	b.n	80020dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b0f      	cmp	r3, #15
 80020c2:	d80a      	bhi.n	80020da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020c4:	2200      	movs	r2, #0
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	f000 ffe3 	bl	8003096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d0:	4a06      	ldr	r2, [pc, #24]	; (80020ec <HAL_InitTick+0x5c>)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e000      	b.n	80020dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000000 	.word	0x20000000
 80020e8:	20000008 	.word	0x20000008
 80020ec:	20000004 	.word	0x20000004

080020f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_IncTick+0x1c>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_IncTick+0x20>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	4a03      	ldr	r2, [pc, #12]	; (8002110 <HAL_IncTick+0x20>)
 8002102:	6013      	str	r3, [r2, #0]
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	20000008 	.word	0x20000008
 8002110:	20000220 	.word	0x20000220

08002114 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return uwTick;
 8002118:	4b02      	ldr	r3, [pc, #8]	; (8002124 <HAL_GetTick+0x10>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	20000220 	.word	0x20000220

08002128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002130:	f7ff fff0 	bl	8002114 <HAL_GetTick>
 8002134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002140:	d005      	beq.n	800214e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_Delay+0x44>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800214e:	bf00      	nop
 8002150:	f7ff ffe0 	bl	8002114 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	429a      	cmp	r2, r3
 800215e:	d8f7      	bhi.n	8002150 <HAL_Delay+0x28>
  {
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20000008 	.word	0x20000008

08002170 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e11c      	b.n	80023bc <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d131      	bne.n	80021f2 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a8c      	ldr	r2, [pc, #560]	; (80023c4 <HAL_CAN_Init+0x254>)
 8002192:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a8c      	ldr	r2, [pc, #560]	; (80023c8 <HAL_CAN_Init+0x258>)
 8002198:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a8b      	ldr	r2, [pc, #556]	; (80023cc <HAL_CAN_Init+0x25c>)
 800219e:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a8b      	ldr	r2, [pc, #556]	; (80023d0 <HAL_CAN_Init+0x260>)
 80021a4:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a8a      	ldr	r2, [pc, #552]	; (80023d4 <HAL_CAN_Init+0x264>)
 80021aa:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a8a      	ldr	r2, [pc, #552]	; (80023d8 <HAL_CAN_Init+0x268>)
 80021b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a89      	ldr	r2, [pc, #548]	; (80023dc <HAL_CAN_Init+0x26c>)
 80021b6:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a89      	ldr	r2, [pc, #548]	; (80023e0 <HAL_CAN_Init+0x270>)
 80021bc:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a88      	ldr	r2, [pc, #544]	; (80023e4 <HAL_CAN_Init+0x274>)
 80021c2:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a88      	ldr	r2, [pc, #544]	; (80023e8 <HAL_CAN_Init+0x278>)
 80021c8:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a87      	ldr	r2, [pc, #540]	; (80023ec <HAL_CAN_Init+0x27c>)
 80021ce:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a87      	ldr	r2, [pc, #540]	; (80023f0 <HAL_CAN_Init+0x280>)
 80021d4:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a86      	ldr	r2, [pc, #536]	; (80023f4 <HAL_CAN_Init+0x284>)
 80021da:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d102      	bne.n	80021ea <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a84      	ldr	r2, [pc, #528]	; (80023f8 <HAL_CAN_Init+0x288>)
 80021e8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0201 	orr.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002202:	f7ff ff87 	bl	8002114 <HAL_GetTick>
 8002206:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002208:	e012      	b.n	8002230 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800220a:	f7ff ff83 	bl	8002114 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b0a      	cmp	r3, #10
 8002216:	d90b      	bls.n	8002230 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2205      	movs	r2, #5
 8002228:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0c5      	b.n	80023bc <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0e5      	beq.n	800220a <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0202 	bic.w	r2, r2, #2
 800224c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800224e:	f7ff ff61 	bl	8002114 <HAL_GetTick>
 8002252:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002254:	e012      	b.n	800227c <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002256:	f7ff ff5d 	bl	8002114 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b0a      	cmp	r3, #10
 8002262:	d90b      	bls.n	800227c <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2205      	movs	r2, #5
 8002274:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e09f      	b.n	80023bc <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1e5      	bne.n	8002256 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	7e1b      	ldrb	r3, [r3, #24]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d108      	bne.n	80022a4 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	e007      	b.n	80022b4 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	7e5b      	ldrb	r3, [r3, #25]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d108      	bne.n	80022ce <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	e007      	b.n	80022de <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	7e9b      	ldrb	r3, [r3, #26]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d108      	bne.n	80022f8 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f042 0220 	orr.w	r2, r2, #32
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	e007      	b.n	8002308 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0220 	bic.w	r2, r2, #32
 8002306:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	7edb      	ldrb	r3, [r3, #27]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d108      	bne.n	8002322 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0210 	bic.w	r2, r2, #16
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e007      	b.n	8002332 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0210 	orr.w	r2, r2, #16
 8002330:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	7f1b      	ldrb	r3, [r3, #28]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d108      	bne.n	800234c <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0208 	orr.w	r2, r2, #8
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	e007      	b.n	800235c <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0208 	bic.w	r2, r2, #8
 800235a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	7f5b      	ldrb	r3, [r3, #29]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d108      	bne.n	8002376 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0204 	orr.w	r2, r2, #4
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	e007      	b.n	8002386 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0204 	bic.w	r2, r2, #4
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	ea42 0103 	orr.w	r1, r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	1e5a      	subs	r2, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	080008ad 	.word	0x080008ad
 80023c8:	08002e7d 	.word	0x08002e7d
 80023cc:	08002e8f 	.word	0x08002e8f
 80023d0:	08002ea1 	.word	0x08002ea1
 80023d4:	08002e11 	.word	0x08002e11
 80023d8:	08002e23 	.word	0x08002e23
 80023dc:	08002e35 	.word	0x08002e35
 80023e0:	08002e47 	.word	0x08002e47
 80023e4:	08002e59 	.word	0x08002e59
 80023e8:	08002e6b 	.word	0x08002e6b
 80023ec:	08002eb3 	.word	0x08002eb3
 80023f0:	08002ec5 	.word	0x08002ec5
 80023f4:	08002ed7 	.word	0x08002ed7
 80023f8:	080005b1 	.word	0x080005b1

080023fc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002412:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d003      	beq.n	8002422 <HAL_CAN_ConfigFilter+0x26>
 800241a:	7cfb      	ldrb	r3, [r7, #19]
 800241c:	2b02      	cmp	r3, #2
 800241e:	f040 80aa 	bne.w	8002576 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002428:	f043 0201 	orr.w	r2, r3, #1
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	f003 031f 	and.w	r3, r3, #31
 800243a:	2201      	movs	r2, #1
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	43db      	mvns	r3, r3
 800244c:	401a      	ands	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d123      	bne.n	80024a4 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	43db      	mvns	r3, r3
 8002466:	401a      	ands	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800247e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	3248      	adds	r2, #72	; 0x48
 8002484:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002498:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800249a:	6979      	ldr	r1, [r7, #20]
 800249c:	3348      	adds	r3, #72	; 0x48
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	440b      	add	r3, r1
 80024a2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d122      	bne.n	80024f2 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	431a      	orrs	r2, r3
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80024cc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	3248      	adds	r2, #72	; 0x48
 80024d2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024e6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024e8:	6979      	ldr	r1, [r7, #20]
 80024ea:	3348      	adds	r3, #72	; 0x48
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	440b      	add	r3, r1
 80024f0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	43db      	mvns	r3, r3
 8002504:	401a      	ands	r2, r3
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800250c:	e007      	b.n	800251e <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	431a      	orrs	r2, r3
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	43db      	mvns	r3, r3
 8002530:	401a      	ands	r2, r3
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002538:	e007      	b.n	800254a <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	431a      	orrs	r2, r3
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d107      	bne.n	8002562 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	431a      	orrs	r2, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002568:	f023 0201 	bic.w	r2, r3, #1
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	e006      	b.n	8002584 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
  }
}
 8002584:	4618      	mov	r0, r3
 8002586:	371c      	adds	r7, #28
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr

0800258e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b084      	sub	sp, #16
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d12e      	bne.n	8002600 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2202      	movs	r2, #2
 80025a6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0201 	bic.w	r2, r2, #1
 80025b8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80025ba:	f7ff fdab 	bl	8002114 <HAL_GetTick>
 80025be:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025c0:	e012      	b.n	80025e8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025c2:	f7ff fda7 	bl	8002114 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b0a      	cmp	r3, #10
 80025ce:	d90b      	bls.n	80025e8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2205      	movs	r2, #5
 80025e0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e012      	b.n	800260e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1e5      	bne.n	80025c2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e006      	b.n	800260e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
  }
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002616:	b480      	push	{r7}
 8002618:	b089      	sub	sp, #36	; 0x24
 800261a:	af00      	add	r7, sp, #0
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800262a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002634:	7ffb      	ldrb	r3, [r7, #31]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d003      	beq.n	8002642 <HAL_CAN_AddTxMessage+0x2c>
 800263a:	7ffb      	ldrb	r3, [r7, #31]
 800263c:	2b02      	cmp	r3, #2
 800263e:	f040 80ad 	bne.w	800279c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10a      	bne.n	8002662 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002652:	2b00      	cmp	r3, #0
 8002654:	d105      	bne.n	8002662 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8095 	beq.w	800278c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	0e1b      	lsrs	r3, r3, #24
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800266c:	2201      	movs	r2, #1
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	409a      	lsls	r2, r3
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10d      	bne.n	800269a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002688:	68f9      	ldr	r1, [r7, #12]
 800268a:	6809      	ldr	r1, [r1, #0]
 800268c:	431a      	orrs	r2, r3
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	3318      	adds	r3, #24
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	440b      	add	r3, r1
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	e00f      	b.n	80026ba <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026a4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026aa:	68f9      	ldr	r1, [r7, #12]
 80026ac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80026ae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3318      	adds	r3, #24
 80026b4:	011b      	lsls	r3, r3, #4
 80026b6:	440b      	add	r3, r1
 80026b8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6819      	ldr	r1, [r3, #0]
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	3318      	adds	r3, #24
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	440b      	add	r3, r1
 80026ca:	3304      	adds	r3, #4
 80026cc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	7d1b      	ldrb	r3, [r3, #20]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d111      	bne.n	80026fa <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	3318      	adds	r3, #24
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	4413      	add	r3, r2
 80026e2:	3304      	adds	r3, #4
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	6811      	ldr	r1, [r2, #0]
 80026ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3318      	adds	r3, #24
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	440b      	add	r3, r1
 80026f6:	3304      	adds	r3, #4
 80026f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3307      	adds	r3, #7
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	061a      	lsls	r2, r3, #24
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3306      	adds	r3, #6
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	041b      	lsls	r3, r3, #16
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3305      	adds	r3, #5
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	021b      	lsls	r3, r3, #8
 8002714:	4313      	orrs	r3, r2
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	3204      	adds	r2, #4
 800271a:	7812      	ldrb	r2, [r2, #0]
 800271c:	4610      	mov	r0, r2
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	6811      	ldr	r1, [r2, #0]
 8002722:	ea43 0200 	orr.w	r2, r3, r0
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	440b      	add	r3, r1
 800272c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002730:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3303      	adds	r3, #3
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	061a      	lsls	r2, r3, #24
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3302      	adds	r3, #2
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	041b      	lsls	r3, r3, #16
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3301      	adds	r3, #1
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	4313      	orrs	r3, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	7812      	ldrb	r2, [r2, #0]
 8002752:	4610      	mov	r0, r2
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	6811      	ldr	r1, [r2, #0]
 8002758:	ea43 0200 	orr.w	r2, r3, r0
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	440b      	add	r3, r1
 8002762:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002766:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	3318      	adds	r3, #24
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	4413      	add	r3, r2
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	6811      	ldr	r1, [r2, #0]
 800277a:	f043 0201 	orr.w	r2, r3, #1
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	3318      	adds	r3, #24
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	440b      	add	r3, r1
 8002786:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	e00e      	b.n	80027aa <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e006      	b.n	80027aa <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
  }
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3724      	adds	r7, #36	; 0x24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr

080027b4 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027c8:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80027ca:	7afb      	ldrb	r3, [r7, #11]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d002      	beq.n	80027d6 <HAL_CAN_IsTxMessagePending+0x22>
 80027d0:	7afb      	ldrb	r3, [r7, #11]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d10b      	bne.n	80027ee <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	069b      	lsls	r3, r3, #26
 80027e0:	401a      	ands	r2, r3
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	069b      	lsls	r3, r3, #26
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d001      	beq.n	80027ee <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80027ea:	2301      	movs	r3, #1
 80027ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80027ee:	68fb      	ldr	r3, [r7, #12]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80027fa:	b480      	push	{r7}
 80027fc:	b087      	sub	sp, #28
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800280e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002810:	7dfb      	ldrb	r3, [r7, #23]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d003      	beq.n	800281e <HAL_CAN_GetRxMessage+0x24>
 8002816:	7dfb      	ldrb	r3, [r7, #23]
 8002818:	2b02      	cmp	r3, #2
 800281a:	f040 8103 	bne.w	8002a24 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10e      	bne.n	8002842 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d116      	bne.n	8002860 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e0f7      	b.n	8002a32 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d107      	bne.n	8002860 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0e8      	b.n	8002a32 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	331b      	adds	r3, #27
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	4413      	add	r3, r2
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0204 	and.w	r2, r3, #4
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10c      	bne.n	8002898 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	331b      	adds	r3, #27
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	4413      	add	r3, r2
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	0d5b      	lsrs	r3, r3, #21
 800288e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	e00b      	b.n	80028b0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	331b      	adds	r3, #27
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	4413      	add	r3, r2
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	08db      	lsrs	r3, r3, #3
 80028a8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	331b      	adds	r3, #27
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	4413      	add	r3, r2
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0202 	and.w	r2, r3, #2
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	331b      	adds	r3, #27
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	4413      	add	r3, r2
 80028d2:	3304      	adds	r3, #4
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2208      	movs	r2, #8
 80028e2:	611a      	str	r2, [r3, #16]
 80028e4:	e00b      	b.n	80028fe <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	331b      	adds	r3, #27
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	4413      	add	r3, r2
 80028f2:	3304      	adds	r3, #4
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 020f 	and.w	r2, r3, #15
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	331b      	adds	r3, #27
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	4413      	add	r3, r2
 800290a:	3304      	adds	r3, #4
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	b2da      	uxtb	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	331b      	adds	r3, #27
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	4413      	add	r3, r2
 8002922:	3304      	adds	r3, #4
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	0c1b      	lsrs	r3, r3, #16
 8002928:	b29a      	uxth	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	4413      	add	r3, r2
 8002938:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	b2da      	uxtb	r2, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	4413      	add	r3, r2
 800294e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	0a1a      	lsrs	r2, r3, #8
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	3301      	adds	r3, #1
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	4413      	add	r3, r2
 8002968:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	0c1a      	lsrs	r2, r3, #16
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	3302      	adds	r3, #2
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	4413      	add	r3, r2
 8002982:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	0e1a      	lsrs	r2, r3, #24
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	3303      	adds	r3, #3
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	4413      	add	r3, r2
 800299c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	3304      	adds	r3, #4
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	0a1a      	lsrs	r2, r3, #8
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	3305      	adds	r3, #5
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	0c1a      	lsrs	r2, r3, #16
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	3306      	adds	r3, #6
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	4413      	add	r3, r2
 80029e8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	0e1a      	lsrs	r2, r3, #24
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	3307      	adds	r3, #7
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d108      	bne.n	8002a10 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0220 	orr.w	r2, r2, #32
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	e007      	b.n	8002a20 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0220 	orr.w	r2, r2, #32
 8002a1e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	e006      	b.n	8002a32 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
  }
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a4c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d002      	beq.n	8002a5a <HAL_CAN_ActivateNotification+0x1e>
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d109      	bne.n	8002a6e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6959      	ldr	r1, [r3, #20]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e006      	b.n	8002a7c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
  }
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3714      	adds	r7, #20
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b08a      	sub	sp, #40	; 0x28
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8083 	beq.w	8002bd4 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d025      	beq.n	8002b24 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2201      	movs	r2, #1
 8002ade:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d004      	beq.n	8002af4 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	4798      	blx	r3
 8002af2:	e017      	b.n	8002b24 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d004      	beq.n	8002b08 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
 8002b06:	e00d      	b.n	8002b24 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d004      	beq.n	8002b1c <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1a:	e003      	b.n	8002b24 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d026      	beq.n	8002b7c <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b36:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d004      	beq.n	8002b4c <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4798      	blx	r3
 8002b4a:	e017      	b.n	8002b7c <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d004      	beq.n	8002b60 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	e00d      	b.n	8002b7c <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d004      	beq.n	8002b74 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
 8002b72:	e003      	b.n	8002b7c <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d026      	beq.n	8002bd4 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d004      	beq.n	8002ba4 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	4798      	blx	r3
 8002ba2:	e017      	b.n	8002bd4 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d004      	beq.n	8002bb8 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb6:	e00d      	b.n	8002bd4 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d004      	beq.n	8002bcc <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bca:	e003      	b.n	8002bd4 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00c      	beq.n	8002bf8 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d007      	beq.n	8002bf8 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2210      	movs	r2, #16
 8002bf6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00c      	beq.n	8002c1c <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2208      	movs	r2, #8
 8002c12:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002c3c:	6a3b      	ldr	r3, [r7, #32]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d00c      	beq.n	8002c60 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d007      	beq.n	8002c60 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2210      	movs	r2, #16
 8002c5e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	f003 0320 	and.w	r3, r3, #32
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00c      	beq.n	8002c84 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d007      	beq.n	8002c84 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2208      	movs	r2, #8
 8002c7a:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00c      	beq.n	8002cc8 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d007      	beq.n	8002cc8 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2210      	movs	r2, #16
 8002cbe:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00c      	beq.n	8002cec <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f003 0308 	and.w	r3, r3, #8
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d007      	beq.n	8002cec <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2208      	movs	r2, #8
 8002ce2:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d07b      	beq.n	8002dee <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d072      	beq.n	8002de6 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d008      	beq.n	8002d1c <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d008      	beq.n	8002d38 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	f043 0302 	orr.w	r3, r3, #2
 8002d36:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d008      	beq.n	8002d54 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	f043 0304 	orr.w	r3, r3, #4
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d043      	beq.n	8002de6 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d03e      	beq.n	8002de6 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d6e:	2b60      	cmp	r3, #96	; 0x60
 8002d70:	d02b      	beq.n	8002dca <HAL_CAN_IRQHandler+0x344>
 8002d72:	2b60      	cmp	r3, #96	; 0x60
 8002d74:	d82e      	bhi.n	8002dd4 <HAL_CAN_IRQHandler+0x34e>
 8002d76:	2b50      	cmp	r3, #80	; 0x50
 8002d78:	d022      	beq.n	8002dc0 <HAL_CAN_IRQHandler+0x33a>
 8002d7a:	2b50      	cmp	r3, #80	; 0x50
 8002d7c:	d82a      	bhi.n	8002dd4 <HAL_CAN_IRQHandler+0x34e>
 8002d7e:	2b40      	cmp	r3, #64	; 0x40
 8002d80:	d019      	beq.n	8002db6 <HAL_CAN_IRQHandler+0x330>
 8002d82:	2b40      	cmp	r3, #64	; 0x40
 8002d84:	d826      	bhi.n	8002dd4 <HAL_CAN_IRQHandler+0x34e>
 8002d86:	2b30      	cmp	r3, #48	; 0x30
 8002d88:	d010      	beq.n	8002dac <HAL_CAN_IRQHandler+0x326>
 8002d8a:	2b30      	cmp	r3, #48	; 0x30
 8002d8c:	d822      	bhi.n	8002dd4 <HAL_CAN_IRQHandler+0x34e>
 8002d8e:	2b10      	cmp	r3, #16
 8002d90:	d002      	beq.n	8002d98 <HAL_CAN_IRQHandler+0x312>
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	d005      	beq.n	8002da2 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002d96:	e01d      	b.n	8002dd4 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	f043 0308 	orr.w	r3, r3, #8
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002da0:	e019      	b.n	8002dd6 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	f043 0310 	orr.w	r3, r3, #16
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002daa:	e014      	b.n	8002dd6 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dae:	f043 0320 	orr.w	r3, r3, #32
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002db4:	e00f      	b.n	8002dd6 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dbe:	e00a      	b.n	8002dd6 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dc8:	e005      	b.n	8002dd6 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002dd2:	e000      	b.n	8002dd6 <HAL_CAN_IRQHandler+0x350>
            break;
 8002dd4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699a      	ldr	r2, [r3, #24]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002de4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2204      	movs	r2, #4
 8002dec:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d009      	beq.n	8002e08 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e08:	bf00      	nop
 8002e0a:	3728      	adds	r7, #40	; 0x28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr

08002e22 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr

08002e46 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr

08002e6a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b083      	sub	sp, #12
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr

08002e8e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bc80      	pop	{r7}
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr

08002ec4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <__NVIC_SetPriorityGrouping+0x44>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f04:	4013      	ands	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f1a:	4a04      	ldr	r2, [pc, #16]	; (8002f2c <__NVIC_SetPriorityGrouping+0x44>)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	60d3      	str	r3, [r2, #12]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	e000ed00 	.word	0xe000ed00

08002f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f34:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <__NVIC_GetPriorityGrouping+0x18>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	0a1b      	lsrs	r3, r3, #8
 8002f3a:	f003 0307 	and.w	r3, r3, #7
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	db0b      	blt.n	8002f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	f003 021f 	and.w	r2, r3, #31
 8002f64:	4906      	ldr	r1, [pc, #24]	; (8002f80 <__NVIC_EnableIRQ+0x34>)
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	095b      	lsrs	r3, r3, #5
 8002f6c:	2001      	movs	r0, #1
 8002f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr
 8002f80:	e000e100 	.word	0xe000e100

08002f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	6039      	str	r1, [r7, #0]
 8002f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	db0a      	blt.n	8002fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	490c      	ldr	r1, [pc, #48]	; (8002fd0 <__NVIC_SetPriority+0x4c>)
 8002f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa2:	0112      	lsls	r2, r2, #4
 8002fa4:	b2d2      	uxtb	r2, r2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fac:	e00a      	b.n	8002fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4908      	ldr	r1, [pc, #32]	; (8002fd4 <__NVIC_SetPriority+0x50>)
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	3b04      	subs	r3, #4
 8002fbc:	0112      	lsls	r2, r2, #4
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	761a      	strb	r2, [r3, #24]
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	e000e100 	.word	0xe000e100
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b089      	sub	sp, #36	; 0x24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f1c3 0307 	rsb	r3, r3, #7
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	bf28      	it	cs
 8002ff6:	2304      	movcs	r3, #4
 8002ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	2b06      	cmp	r3, #6
 8003000:	d902      	bls.n	8003008 <NVIC_EncodePriority+0x30>
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3b03      	subs	r3, #3
 8003006:	e000      	b.n	800300a <NVIC_EncodePriority+0x32>
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800300c:	f04f 32ff 	mov.w	r2, #4294967295
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43da      	mvns	r2, r3
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	401a      	ands	r2, r3
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003020:	f04f 31ff 	mov.w	r1, #4294967295
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	43d9      	mvns	r1, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003030:	4313      	orrs	r3, r2
         );
}
 8003032:	4618      	mov	r0, r3
 8003034:	3724      	adds	r7, #36	; 0x24
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3b01      	subs	r3, #1
 8003048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800304c:	d301      	bcc.n	8003052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800304e:	2301      	movs	r3, #1
 8003050:	e00f      	b.n	8003072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003052:	4a0a      	ldr	r2, [pc, #40]	; (800307c <SysTick_Config+0x40>)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3b01      	subs	r3, #1
 8003058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800305a:	210f      	movs	r1, #15
 800305c:	f04f 30ff 	mov.w	r0, #4294967295
 8003060:	f7ff ff90 	bl	8002f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <SysTick_Config+0x40>)
 8003066:	2200      	movs	r2, #0
 8003068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800306a:	4b04      	ldr	r3, [pc, #16]	; (800307c <SysTick_Config+0x40>)
 800306c:	2207      	movs	r2, #7
 800306e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	e000e010 	.word	0xe000e010

08003080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7ff ff2d 	bl	8002ee8 <__NVIC_SetPriorityGrouping>
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003096:	b580      	push	{r7, lr}
 8003098:	b086      	sub	sp, #24
 800309a:	af00      	add	r7, sp, #0
 800309c:	4603      	mov	r3, r0
 800309e:	60b9      	str	r1, [r7, #8]
 80030a0:	607a      	str	r2, [r7, #4]
 80030a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a8:	f7ff ff42 	bl	8002f30 <__NVIC_GetPriorityGrouping>
 80030ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	6978      	ldr	r0, [r7, #20]
 80030b4:	f7ff ff90 	bl	8002fd8 <NVIC_EncodePriority>
 80030b8:	4602      	mov	r2, r0
 80030ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030be:	4611      	mov	r1, r2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff5f 	bl	8002f84 <__NVIC_SetPriority>
}
 80030c6:	bf00      	nop
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	4603      	mov	r3, r0
 80030d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ff35 	bl	8002f4c <__NVIC_EnableIRQ>
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7ff ffa2 	bl	800303c <SysTick_Config>
 80030f8:	4603      	mov	r3, r0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e00e      	b.n	8003132 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	795b      	ldrb	r3, [r3, #5]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d105      	bne.n	800312a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7fd fc05 	bl	8000934 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
	...

0800313c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003144:	2300      	movs	r3, #0
 8003146:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d005      	beq.n	8003160 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2204      	movs	r2, #4
 8003158:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	73fb      	strb	r3, [r7, #15]
 800315e:	e051      	b.n	8003204 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 020e 	bic.w	r2, r2, #14
 800316e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a22      	ldr	r2, [pc, #136]	; (8003210 <HAL_DMA_Abort_IT+0xd4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d029      	beq.n	80031de <HAL_DMA_Abort_IT+0xa2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a21      	ldr	r2, [pc, #132]	; (8003214 <HAL_DMA_Abort_IT+0xd8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d022      	beq.n	80031da <HAL_DMA_Abort_IT+0x9e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a1f      	ldr	r2, [pc, #124]	; (8003218 <HAL_DMA_Abort_IT+0xdc>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d01a      	beq.n	80031d4 <HAL_DMA_Abort_IT+0x98>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a1e      	ldr	r2, [pc, #120]	; (800321c <HAL_DMA_Abort_IT+0xe0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d012      	beq.n	80031ce <HAL_DMA_Abort_IT+0x92>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a1c      	ldr	r2, [pc, #112]	; (8003220 <HAL_DMA_Abort_IT+0xe4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d00a      	beq.n	80031c8 <HAL_DMA_Abort_IT+0x8c>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a1b      	ldr	r2, [pc, #108]	; (8003224 <HAL_DMA_Abort_IT+0xe8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d102      	bne.n	80031c2 <HAL_DMA_Abort_IT+0x86>
 80031bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031c0:	e00e      	b.n	80031e0 <HAL_DMA_Abort_IT+0xa4>
 80031c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031c6:	e00b      	b.n	80031e0 <HAL_DMA_Abort_IT+0xa4>
 80031c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031cc:	e008      	b.n	80031e0 <HAL_DMA_Abort_IT+0xa4>
 80031ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031d2:	e005      	b.n	80031e0 <HAL_DMA_Abort_IT+0xa4>
 80031d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031d8:	e002      	b.n	80031e0 <HAL_DMA_Abort_IT+0xa4>
 80031da:	2310      	movs	r3, #16
 80031dc:	e000      	b.n	80031e0 <HAL_DMA_Abort_IT+0xa4>
 80031de:	2301      	movs	r3, #1
 80031e0:	4a11      	ldr	r2, [pc, #68]	; (8003228 <HAL_DMA_Abort_IT+0xec>)
 80031e2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d003      	beq.n	8003204 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	4798      	blx	r3
    } 
  }
  return status;
 8003204:	7bfb      	ldrb	r3, [r7, #15]
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40020008 	.word	0x40020008
 8003214:	4002001c 	.word	0x4002001c
 8003218:	40020030 	.word	0x40020030
 800321c:	40020044 	.word	0x40020044
 8003220:	40020058 	.word	0x40020058
 8003224:	4002006c 	.word	0x4002006c
 8003228:	40020000 	.word	0x40020000

0800322c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800322c:	b480      	push	{r7}
 800322e:	b08b      	sub	sp, #44	; 0x2c
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003236:	2300      	movs	r3, #0
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800323a:	2300      	movs	r3, #0
 800323c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800323e:	e169      	b.n	8003514 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003240:	2201      	movs	r2, #1
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	69fa      	ldr	r2, [r7, #28]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	429a      	cmp	r2, r3
 800325a:	f040 8158 	bne.w	800350e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4a9a      	ldr	r2, [pc, #616]	; (80034cc <HAL_GPIO_Init+0x2a0>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d05e      	beq.n	8003326 <HAL_GPIO_Init+0xfa>
 8003268:	4a98      	ldr	r2, [pc, #608]	; (80034cc <HAL_GPIO_Init+0x2a0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d875      	bhi.n	800335a <HAL_GPIO_Init+0x12e>
 800326e:	4a98      	ldr	r2, [pc, #608]	; (80034d0 <HAL_GPIO_Init+0x2a4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d058      	beq.n	8003326 <HAL_GPIO_Init+0xfa>
 8003274:	4a96      	ldr	r2, [pc, #600]	; (80034d0 <HAL_GPIO_Init+0x2a4>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d86f      	bhi.n	800335a <HAL_GPIO_Init+0x12e>
 800327a:	4a96      	ldr	r2, [pc, #600]	; (80034d4 <HAL_GPIO_Init+0x2a8>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d052      	beq.n	8003326 <HAL_GPIO_Init+0xfa>
 8003280:	4a94      	ldr	r2, [pc, #592]	; (80034d4 <HAL_GPIO_Init+0x2a8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d869      	bhi.n	800335a <HAL_GPIO_Init+0x12e>
 8003286:	4a94      	ldr	r2, [pc, #592]	; (80034d8 <HAL_GPIO_Init+0x2ac>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d04c      	beq.n	8003326 <HAL_GPIO_Init+0xfa>
 800328c:	4a92      	ldr	r2, [pc, #584]	; (80034d8 <HAL_GPIO_Init+0x2ac>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d863      	bhi.n	800335a <HAL_GPIO_Init+0x12e>
 8003292:	4a92      	ldr	r2, [pc, #584]	; (80034dc <HAL_GPIO_Init+0x2b0>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d046      	beq.n	8003326 <HAL_GPIO_Init+0xfa>
 8003298:	4a90      	ldr	r2, [pc, #576]	; (80034dc <HAL_GPIO_Init+0x2b0>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d85d      	bhi.n	800335a <HAL_GPIO_Init+0x12e>
 800329e:	2b12      	cmp	r3, #18
 80032a0:	d82a      	bhi.n	80032f8 <HAL_GPIO_Init+0xcc>
 80032a2:	2b12      	cmp	r3, #18
 80032a4:	d859      	bhi.n	800335a <HAL_GPIO_Init+0x12e>
 80032a6:	a201      	add	r2, pc, #4	; (adr r2, 80032ac <HAL_GPIO_Init+0x80>)
 80032a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ac:	08003327 	.word	0x08003327
 80032b0:	08003301 	.word	0x08003301
 80032b4:	08003313 	.word	0x08003313
 80032b8:	08003355 	.word	0x08003355
 80032bc:	0800335b 	.word	0x0800335b
 80032c0:	0800335b 	.word	0x0800335b
 80032c4:	0800335b 	.word	0x0800335b
 80032c8:	0800335b 	.word	0x0800335b
 80032cc:	0800335b 	.word	0x0800335b
 80032d0:	0800335b 	.word	0x0800335b
 80032d4:	0800335b 	.word	0x0800335b
 80032d8:	0800335b 	.word	0x0800335b
 80032dc:	0800335b 	.word	0x0800335b
 80032e0:	0800335b 	.word	0x0800335b
 80032e4:	0800335b 	.word	0x0800335b
 80032e8:	0800335b 	.word	0x0800335b
 80032ec:	0800335b 	.word	0x0800335b
 80032f0:	08003309 	.word	0x08003309
 80032f4:	0800331d 	.word	0x0800331d
 80032f8:	4a79      	ldr	r2, [pc, #484]	; (80034e0 <HAL_GPIO_Init+0x2b4>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d013      	beq.n	8003326 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80032fe:	e02c      	b.n	800335a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	623b      	str	r3, [r7, #32]
          break;
 8003306:	e029      	b.n	800335c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	3304      	adds	r3, #4
 800330e:	623b      	str	r3, [r7, #32]
          break;
 8003310:	e024      	b.n	800335c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	3308      	adds	r3, #8
 8003318:	623b      	str	r3, [r7, #32]
          break;
 800331a:	e01f      	b.n	800335c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	330c      	adds	r3, #12
 8003322:	623b      	str	r3, [r7, #32]
          break;
 8003324:	e01a      	b.n	800335c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d102      	bne.n	8003334 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800332e:	2304      	movs	r3, #4
 8003330:	623b      	str	r3, [r7, #32]
          break;
 8003332:	e013      	b.n	800335c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d105      	bne.n	8003348 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800333c:	2308      	movs	r3, #8
 800333e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69fa      	ldr	r2, [r7, #28]
 8003344:	611a      	str	r2, [r3, #16]
          break;
 8003346:	e009      	b.n	800335c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003348:	2308      	movs	r3, #8
 800334a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	615a      	str	r2, [r3, #20]
          break;
 8003352:	e003      	b.n	800335c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003354:	2300      	movs	r3, #0
 8003356:	623b      	str	r3, [r7, #32]
          break;
 8003358:	e000      	b.n	800335c <HAL_GPIO_Init+0x130>
          break;
 800335a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	2bff      	cmp	r3, #255	; 0xff
 8003360:	d801      	bhi.n	8003366 <HAL_GPIO_Init+0x13a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	e001      	b.n	800336a <HAL_GPIO_Init+0x13e>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3304      	adds	r3, #4
 800336a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	2bff      	cmp	r3, #255	; 0xff
 8003370:	d802      	bhi.n	8003378 <HAL_GPIO_Init+0x14c>
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	e002      	b.n	800337e <HAL_GPIO_Init+0x152>
 8003378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337a:	3b08      	subs	r3, #8
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	210f      	movs	r1, #15
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	fa01 f303 	lsl.w	r3, r1, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	401a      	ands	r2, r3
 8003390:	6a39      	ldr	r1, [r7, #32]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	fa01 f303 	lsl.w	r3, r1, r3
 8003398:	431a      	orrs	r2, r3
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 80b1 	beq.w	800350e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80033ac:	4b4d      	ldr	r3, [pc, #308]	; (80034e4 <HAL_GPIO_Init+0x2b8>)
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	4a4c      	ldr	r2, [pc, #304]	; (80034e4 <HAL_GPIO_Init+0x2b8>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6193      	str	r3, [r2, #24]
 80033b8:	4b4a      	ldr	r3, [pc, #296]	; (80034e4 <HAL_GPIO_Init+0x2b8>)
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033c4:	4a48      	ldr	r2, [pc, #288]	; (80034e8 <HAL_GPIO_Init+0x2bc>)
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	089b      	lsrs	r3, r3, #2
 80033ca:	3302      	adds	r3, #2
 80033cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	f003 0303 	and.w	r3, r3, #3
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	220f      	movs	r2, #15
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4013      	ands	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a40      	ldr	r2, [pc, #256]	; (80034ec <HAL_GPIO_Init+0x2c0>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d013      	beq.n	8003418 <HAL_GPIO_Init+0x1ec>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a3f      	ldr	r2, [pc, #252]	; (80034f0 <HAL_GPIO_Init+0x2c4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d00d      	beq.n	8003414 <HAL_GPIO_Init+0x1e8>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a3e      	ldr	r2, [pc, #248]	; (80034f4 <HAL_GPIO_Init+0x2c8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d007      	beq.n	8003410 <HAL_GPIO_Init+0x1e4>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a3d      	ldr	r2, [pc, #244]	; (80034f8 <HAL_GPIO_Init+0x2cc>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d101      	bne.n	800340c <HAL_GPIO_Init+0x1e0>
 8003408:	2303      	movs	r3, #3
 800340a:	e006      	b.n	800341a <HAL_GPIO_Init+0x1ee>
 800340c:	2304      	movs	r3, #4
 800340e:	e004      	b.n	800341a <HAL_GPIO_Init+0x1ee>
 8003410:	2302      	movs	r3, #2
 8003412:	e002      	b.n	800341a <HAL_GPIO_Init+0x1ee>
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <HAL_GPIO_Init+0x1ee>
 8003418:	2300      	movs	r3, #0
 800341a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341c:	f002 0203 	and.w	r2, r2, #3
 8003420:	0092      	lsls	r2, r2, #2
 8003422:	4093      	lsls	r3, r2
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	4313      	orrs	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800342a:	492f      	ldr	r1, [pc, #188]	; (80034e8 <HAL_GPIO_Init+0x2bc>)
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	089b      	lsrs	r3, r3, #2
 8003430:	3302      	adds	r3, #2
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d006      	beq.n	8003452 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003444:	4b2d      	ldr	r3, [pc, #180]	; (80034fc <HAL_GPIO_Init+0x2d0>)
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	492c      	ldr	r1, [pc, #176]	; (80034fc <HAL_GPIO_Init+0x2d0>)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	4313      	orrs	r3, r2
 800344e:	608b      	str	r3, [r1, #8]
 8003450:	e006      	b.n	8003460 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003452:	4b2a      	ldr	r3, [pc, #168]	; (80034fc <HAL_GPIO_Init+0x2d0>)
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	43db      	mvns	r3, r3
 800345a:	4928      	ldr	r1, [pc, #160]	; (80034fc <HAL_GPIO_Init+0x2d0>)
 800345c:	4013      	ands	r3, r2
 800345e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d006      	beq.n	800347a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800346c:	4b23      	ldr	r3, [pc, #140]	; (80034fc <HAL_GPIO_Init+0x2d0>)
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	4922      	ldr	r1, [pc, #136]	; (80034fc <HAL_GPIO_Init+0x2d0>)
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	4313      	orrs	r3, r2
 8003476:	60cb      	str	r3, [r1, #12]
 8003478:	e006      	b.n	8003488 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800347a:	4b20      	ldr	r3, [pc, #128]	; (80034fc <HAL_GPIO_Init+0x2d0>)
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	43db      	mvns	r3, r3
 8003482:	491e      	ldr	r1, [pc, #120]	; (80034fc <HAL_GPIO_Init+0x2d0>)
 8003484:	4013      	ands	r3, r2
 8003486:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d006      	beq.n	80034a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003494:	4b19      	ldr	r3, [pc, #100]	; (80034fc <HAL_GPIO_Init+0x2d0>)
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	4918      	ldr	r1, [pc, #96]	; (80034fc <HAL_GPIO_Init+0x2d0>)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]
 80034a0:	e006      	b.n	80034b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80034a2:	4b16      	ldr	r3, [pc, #88]	; (80034fc <HAL_GPIO_Init+0x2d0>)
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	43db      	mvns	r3, r3
 80034aa:	4914      	ldr	r1, [pc, #80]	; (80034fc <HAL_GPIO_Init+0x2d0>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d021      	beq.n	8003500 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034bc:	4b0f      	ldr	r3, [pc, #60]	; (80034fc <HAL_GPIO_Init+0x2d0>)
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	490e      	ldr	r1, [pc, #56]	; (80034fc <HAL_GPIO_Init+0x2d0>)
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	600b      	str	r3, [r1, #0]
 80034c8:	e021      	b.n	800350e <HAL_GPIO_Init+0x2e2>
 80034ca:	bf00      	nop
 80034cc:	10320000 	.word	0x10320000
 80034d0:	10310000 	.word	0x10310000
 80034d4:	10220000 	.word	0x10220000
 80034d8:	10210000 	.word	0x10210000
 80034dc:	10120000 	.word	0x10120000
 80034e0:	10110000 	.word	0x10110000
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40010000 	.word	0x40010000
 80034ec:	40010800 	.word	0x40010800
 80034f0:	40010c00 	.word	0x40010c00
 80034f4:	40011000 	.word	0x40011000
 80034f8:	40011400 	.word	0x40011400
 80034fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_GPIO_Init+0x304>)
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	43db      	mvns	r3, r3
 8003508:	4909      	ldr	r1, [pc, #36]	; (8003530 <HAL_GPIO_Init+0x304>)
 800350a:	4013      	ands	r3, r2
 800350c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	3301      	adds	r3, #1
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	fa22 f303 	lsr.w	r3, r2, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	f47f ae8e 	bne.w	8003240 <HAL_GPIO_Init+0x14>
  }
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop
 8003528:	372c      	adds	r7, #44	; 0x2c
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr
 8003530:	40010400 	.word	0x40010400

08003534 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	887b      	ldrh	r3, [r7, #2]
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800354c:	2301      	movs	r3, #1
 800354e:	73fb      	strb	r3, [r7, #15]
 8003550:	e001      	b.n	8003556 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003552:	2300      	movs	r3, #0
 8003554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003556:	7bfb      	ldrb	r3, [r7, #15]
}
 8003558:	4618      	mov	r0, r3
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr

08003562 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	460b      	mov	r3, r1
 800356c:	807b      	strh	r3, [r7, #2]
 800356e:	4613      	mov	r3, r2
 8003570:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003572:	787b      	ldrb	r3, [r7, #1]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003578:	887a      	ldrh	r2, [r7, #2]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800357e:	e003      	b.n	8003588 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003580:	887b      	ldrh	r3, [r7, #2]
 8003582:	041a      	lsls	r2, r3, #16
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	611a      	str	r2, [r3, #16]
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	bc80      	pop	{r7}
 8003590:	4770      	bx	lr

08003592 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003592:	b480      	push	{r7}
 8003594:	b085      	sub	sp, #20
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	460b      	mov	r3, r1
 800359c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035a4:	887a      	ldrh	r2, [r7, #2]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	4013      	ands	r3, r2
 80035aa:	041a      	lsls	r2, r3, #16
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	43d9      	mvns	r1, r3
 80035b0:	887b      	ldrh	r3, [r7, #2]
 80035b2:	400b      	ands	r3, r1
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	611a      	str	r2, [r3, #16]
}
 80035ba:	bf00      	nop
 80035bc:	3714      	adds	r7, #20
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	4603      	mov	r3, r0
 80035cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035ce:	4b08      	ldr	r3, [pc, #32]	; (80035f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035d0:	695a      	ldr	r2, [r3, #20]
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d006      	beq.n	80035e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035da:	4a05      	ldr	r2, [pc, #20]	; (80035f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035dc:	88fb      	ldrh	r3, [r7, #6]
 80035de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fd fd8e 	bl	8001104 <HAL_GPIO_EXTI_Callback>
  }
}
 80035e8:	bf00      	nop
 80035ea:	3708      	adds	r7, #8
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40010400 	.word	0x40010400

080035f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e272      	b.n	8003aec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 8087 	beq.w	8003722 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003614:	4b92      	ldr	r3, [pc, #584]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 030c 	and.w	r3, r3, #12
 800361c:	2b04      	cmp	r3, #4
 800361e:	d00c      	beq.n	800363a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003620:	4b8f      	ldr	r3, [pc, #572]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 030c 	and.w	r3, r3, #12
 8003628:	2b08      	cmp	r3, #8
 800362a:	d112      	bne.n	8003652 <HAL_RCC_OscConfig+0x5e>
 800362c:	4b8c      	ldr	r3, [pc, #560]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003638:	d10b      	bne.n	8003652 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800363a:	4b89      	ldr	r3, [pc, #548]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d06c      	beq.n	8003720 <HAL_RCC_OscConfig+0x12c>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d168      	bne.n	8003720 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e24c      	b.n	8003aec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365a:	d106      	bne.n	800366a <HAL_RCC_OscConfig+0x76>
 800365c:	4b80      	ldr	r3, [pc, #512]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a7f      	ldr	r2, [pc, #508]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 8003662:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	e02e      	b.n	80036c8 <HAL_RCC_OscConfig+0xd4>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10c      	bne.n	800368c <HAL_RCC_OscConfig+0x98>
 8003672:	4b7b      	ldr	r3, [pc, #492]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a7a      	ldr	r2, [pc, #488]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 8003678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	4b78      	ldr	r3, [pc, #480]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a77      	ldr	r2, [pc, #476]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 8003684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003688:	6013      	str	r3, [r2, #0]
 800368a:	e01d      	b.n	80036c8 <HAL_RCC_OscConfig+0xd4>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003694:	d10c      	bne.n	80036b0 <HAL_RCC_OscConfig+0xbc>
 8003696:	4b72      	ldr	r3, [pc, #456]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a71      	ldr	r2, [pc, #452]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 800369c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	4b6f      	ldr	r3, [pc, #444]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a6e      	ldr	r2, [pc, #440]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 80036a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	e00b      	b.n	80036c8 <HAL_RCC_OscConfig+0xd4>
 80036b0:	4b6b      	ldr	r3, [pc, #428]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a6a      	ldr	r2, [pc, #424]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 80036b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	4b68      	ldr	r3, [pc, #416]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a67      	ldr	r2, [pc, #412]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 80036c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d013      	beq.n	80036f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d0:	f7fe fd20 	bl	8002114 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036d8:	f7fe fd1c 	bl	8002114 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b64      	cmp	r3, #100	; 0x64
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e200      	b.n	8003aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ea:	4b5d      	ldr	r3, [pc, #372]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCC_OscConfig+0xe4>
 80036f6:	e014      	b.n	8003722 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f8:	f7fe fd0c 	bl	8002114 <HAL_GetTick>
 80036fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036fe:	e008      	b.n	8003712 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003700:	f7fe fd08 	bl	8002114 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b64      	cmp	r3, #100	; 0x64
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e1ec      	b.n	8003aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003712:	4b53      	ldr	r3, [pc, #332]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x10c>
 800371e:	e000      	b.n	8003722 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d063      	beq.n	80037f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800372e:	4b4c      	ldr	r3, [pc, #304]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00b      	beq.n	8003752 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800373a:	4b49      	ldr	r3, [pc, #292]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b08      	cmp	r3, #8
 8003744:	d11c      	bne.n	8003780 <HAL_RCC_OscConfig+0x18c>
 8003746:	4b46      	ldr	r3, [pc, #280]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d116      	bne.n	8003780 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003752:	4b43      	ldr	r3, [pc, #268]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d005      	beq.n	800376a <HAL_RCC_OscConfig+0x176>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d001      	beq.n	800376a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e1c0      	b.n	8003aec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376a:	4b3d      	ldr	r3, [pc, #244]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4939      	ldr	r1, [pc, #228]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 800377a:	4313      	orrs	r3, r2
 800377c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377e:	e03a      	b.n	80037f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d020      	beq.n	80037ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003788:	4b36      	ldr	r3, [pc, #216]	; (8003864 <HAL_RCC_OscConfig+0x270>)
 800378a:	2201      	movs	r2, #1
 800378c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378e:	f7fe fcc1 	bl	8002114 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003794:	e008      	b.n	80037a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003796:	f7fe fcbd 	bl	8002114 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e1a1      	b.n	8003aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a8:	4b2d      	ldr	r3, [pc, #180]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f0      	beq.n	8003796 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b4:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	4927      	ldr	r1, [pc, #156]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	600b      	str	r3, [r1, #0]
 80037c8:	e015      	b.n	80037f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ca:	4b26      	ldr	r3, [pc, #152]	; (8003864 <HAL_RCC_OscConfig+0x270>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7fe fca0 	bl	8002114 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037d8:	f7fe fc9c 	bl	8002114 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e180      	b.n	8003aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ea:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f0      	bne.n	80037d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d03a      	beq.n	8003878 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d019      	beq.n	800383e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800380a:	4b17      	ldr	r3, [pc, #92]	; (8003868 <HAL_RCC_OscConfig+0x274>)
 800380c:	2201      	movs	r2, #1
 800380e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003810:	f7fe fc80 	bl	8002114 <HAL_GetTick>
 8003814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003816:	e008      	b.n	800382a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003818:	f7fe fc7c 	bl	8002114 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	2b02      	cmp	r3, #2
 8003824:	d901      	bls.n	800382a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e160      	b.n	8003aec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800382a:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <HAL_RCC_OscConfig+0x26c>)
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	f003 0302 	and.w	r3, r3, #2
 8003832:	2b00      	cmp	r3, #0
 8003834:	d0f0      	beq.n	8003818 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003836:	2001      	movs	r0, #1
 8003838:	f000 fade 	bl	8003df8 <RCC_Delay>
 800383c:	e01c      	b.n	8003878 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800383e:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <HAL_RCC_OscConfig+0x274>)
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003844:	f7fe fc66 	bl	8002114 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800384a:	e00f      	b.n	800386c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800384c:	f7fe fc62 	bl	8002114 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d908      	bls.n	800386c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e146      	b.n	8003aec <HAL_RCC_OscConfig+0x4f8>
 800385e:	bf00      	nop
 8003860:	40021000 	.word	0x40021000
 8003864:	42420000 	.word	0x42420000
 8003868:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800386c:	4b92      	ldr	r3, [pc, #584]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1e9      	bne.n	800384c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80a6 	beq.w	80039d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003886:	2300      	movs	r3, #0
 8003888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800388a:	4b8b      	ldr	r3, [pc, #556]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10d      	bne.n	80038b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003896:	4b88      	ldr	r3, [pc, #544]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	4a87      	ldr	r2, [pc, #540]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 800389c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a0:	61d3      	str	r3, [r2, #28]
 80038a2:	4b85      	ldr	r3, [pc, #532]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038aa:	60bb      	str	r3, [r7, #8]
 80038ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038ae:	2301      	movs	r3, #1
 80038b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b2:	4b82      	ldr	r3, [pc, #520]	; (8003abc <HAL_RCC_OscConfig+0x4c8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d118      	bne.n	80038f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038be:	4b7f      	ldr	r3, [pc, #508]	; (8003abc <HAL_RCC_OscConfig+0x4c8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a7e      	ldr	r2, [pc, #504]	; (8003abc <HAL_RCC_OscConfig+0x4c8>)
 80038c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ca:	f7fe fc23 	bl	8002114 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d0:	e008      	b.n	80038e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d2:	f7fe fc1f 	bl	8002114 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b64      	cmp	r3, #100	; 0x64
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e103      	b.n	8003aec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e4:	4b75      	ldr	r3, [pc, #468]	; (8003abc <HAL_RCC_OscConfig+0x4c8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0f0      	beq.n	80038d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d106      	bne.n	8003906 <HAL_RCC_OscConfig+0x312>
 80038f8:	4b6f      	ldr	r3, [pc, #444]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	4a6e      	ldr	r2, [pc, #440]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	6213      	str	r3, [r2, #32]
 8003904:	e02d      	b.n	8003962 <HAL_RCC_OscConfig+0x36e>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10c      	bne.n	8003928 <HAL_RCC_OscConfig+0x334>
 800390e:	4b6a      	ldr	r3, [pc, #424]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	4a69      	ldr	r2, [pc, #420]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 8003914:	f023 0301 	bic.w	r3, r3, #1
 8003918:	6213      	str	r3, [r2, #32]
 800391a:	4b67      	ldr	r3, [pc, #412]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	4a66      	ldr	r2, [pc, #408]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 8003920:	f023 0304 	bic.w	r3, r3, #4
 8003924:	6213      	str	r3, [r2, #32]
 8003926:	e01c      	b.n	8003962 <HAL_RCC_OscConfig+0x36e>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	2b05      	cmp	r3, #5
 800392e:	d10c      	bne.n	800394a <HAL_RCC_OscConfig+0x356>
 8003930:	4b61      	ldr	r3, [pc, #388]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	4a60      	ldr	r2, [pc, #384]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 8003936:	f043 0304 	orr.w	r3, r3, #4
 800393a:	6213      	str	r3, [r2, #32]
 800393c:	4b5e      	ldr	r3, [pc, #376]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	4a5d      	ldr	r2, [pc, #372]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	6213      	str	r3, [r2, #32]
 8003948:	e00b      	b.n	8003962 <HAL_RCC_OscConfig+0x36e>
 800394a:	4b5b      	ldr	r3, [pc, #364]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	4a5a      	ldr	r2, [pc, #360]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 8003950:	f023 0301 	bic.w	r3, r3, #1
 8003954:	6213      	str	r3, [r2, #32]
 8003956:	4b58      	ldr	r3, [pc, #352]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	4a57      	ldr	r2, [pc, #348]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 800395c:	f023 0304 	bic.w	r3, r3, #4
 8003960:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d015      	beq.n	8003996 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800396a:	f7fe fbd3 	bl	8002114 <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003970:	e00a      	b.n	8003988 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003972:	f7fe fbcf 	bl	8002114 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003980:	4293      	cmp	r3, r2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e0b1      	b.n	8003aec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003988:	4b4b      	ldr	r3, [pc, #300]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d0ee      	beq.n	8003972 <HAL_RCC_OscConfig+0x37e>
 8003994:	e014      	b.n	80039c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003996:	f7fe fbbd 	bl	8002114 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800399c:	e00a      	b.n	80039b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800399e:	f7fe fbb9 	bl	8002114 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e09b      	b.n	8003aec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039b4:	4b40      	ldr	r3, [pc, #256]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d1ee      	bne.n	800399e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039c0:	7dfb      	ldrb	r3, [r7, #23]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d105      	bne.n	80039d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039c6:	4b3c      	ldr	r3, [pc, #240]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 80039c8:	69db      	ldr	r3, [r3, #28]
 80039ca:	4a3b      	ldr	r2, [pc, #236]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 80039cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8087 	beq.w	8003aea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039dc:	4b36      	ldr	r3, [pc, #216]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 030c 	and.w	r3, r3, #12
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d061      	beq.n	8003aac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d146      	bne.n	8003a7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f0:	4b33      	ldr	r3, [pc, #204]	; (8003ac0 <HAL_RCC_OscConfig+0x4cc>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f6:	f7fe fb8d 	bl	8002114 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fe:	f7fe fb89 	bl	8002114 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e06d      	b.n	8003aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a10:	4b29      	ldr	r3, [pc, #164]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1f0      	bne.n	80039fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a1b      	ldr	r3, [r3, #32]
 8003a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a24:	d108      	bne.n	8003a38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a26:	4b24      	ldr	r3, [pc, #144]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	4921      	ldr	r1, [pc, #132]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a38:	4b1f      	ldr	r3, [pc, #124]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a19      	ldr	r1, [r3, #32]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	430b      	orrs	r3, r1
 8003a4a:	491b      	ldr	r1, [pc, #108]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a50:	4b1b      	ldr	r3, [pc, #108]	; (8003ac0 <HAL_RCC_OscConfig+0x4cc>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a56:	f7fe fb5d 	bl	8002114 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a5e:	f7fe fb59 	bl	8002114 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e03d      	b.n	8003aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a70:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <HAL_RCC_OscConfig+0x46a>
 8003a7c:	e035      	b.n	8003aea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a7e:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <HAL_RCC_OscConfig+0x4cc>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a84:	f7fe fb46 	bl	8002114 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8c:	f7fe fb42 	bl	8002114 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e026      	b.n	8003aec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_RCC_OscConfig+0x4c4>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1f0      	bne.n	8003a8c <HAL_RCC_OscConfig+0x498>
 8003aaa:	e01e      	b.n	8003aea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d107      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e019      	b.n	8003aec <HAL_RCC_OscConfig+0x4f8>
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40007000 	.word	0x40007000
 8003ac0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ac4:	4b0b      	ldr	r3, [pc, #44]	; (8003af4 <HAL_RCC_OscConfig+0x500>)
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d106      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d001      	beq.n	8003aea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40021000 	.word	0x40021000

08003af8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0d0      	b.n	8003cae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b0c:	4b6a      	ldr	r3, [pc, #424]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d910      	bls.n	8003b3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1a:	4b67      	ldr	r3, [pc, #412]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f023 0207 	bic.w	r2, r3, #7
 8003b22:	4965      	ldr	r1, [pc, #404]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b2a:	4b63      	ldr	r3, [pc, #396]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d001      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0b8      	b.n	8003cae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d020      	beq.n	8003b8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b54:	4b59      	ldr	r3, [pc, #356]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	4a58      	ldr	r2, [pc, #352]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b6c:	4b53      	ldr	r3, [pc, #332]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	4a52      	ldr	r2, [pc, #328]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003b76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b78:	4b50      	ldr	r3, [pc, #320]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	494d      	ldr	r1, [pc, #308]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d040      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d107      	bne.n	8003bae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b9e:	4b47      	ldr	r3, [pc, #284]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d115      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e07f      	b.n	8003cae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d107      	bne.n	8003bc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb6:	4b41      	ldr	r3, [pc, #260]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e073      	b.n	8003cae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc6:	4b3d      	ldr	r3, [pc, #244]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0302 	and.w	r3, r3, #2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e06b      	b.n	8003cae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bd6:	4b39      	ldr	r3, [pc, #228]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f023 0203 	bic.w	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	4936      	ldr	r1, [pc, #216]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003be8:	f7fe fa94 	bl	8002114 <HAL_GetTick>
 8003bec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bee:	e00a      	b.n	8003c06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bf0:	f7fe fa90 	bl	8002114 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e053      	b.n	8003cae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c06:	4b2d      	ldr	r3, [pc, #180]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f003 020c 	and.w	r2, r3, #12
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d1eb      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c18:	4b27      	ldr	r3, [pc, #156]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d210      	bcs.n	8003c48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c26:	4b24      	ldr	r3, [pc, #144]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 0207 	bic.w	r2, r3, #7
 8003c2e:	4922      	ldr	r1, [pc, #136]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c36:	4b20      	ldr	r3, [pc, #128]	; (8003cb8 <HAL_RCC_ClockConfig+0x1c0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e032      	b.n	8003cae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c54:	4b19      	ldr	r3, [pc, #100]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	4916      	ldr	r1, [pc, #88]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d009      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c72:	4b12      	ldr	r3, [pc, #72]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	490e      	ldr	r1, [pc, #56]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c86:	f000 f859 	bl	8003d3c <HAL_RCC_GetSysClockFreq>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <HAL_RCC_ClockConfig+0x1c4>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	490a      	ldr	r1, [pc, #40]	; (8003cc0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c98:	5ccb      	ldrb	r3, [r1, r3]
 8003c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c9e:	4a09      	ldr	r2, [pc, #36]	; (8003cc4 <HAL_RCC_ClockConfig+0x1cc>)
 8003ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_RCC_ClockConfig+0x1d0>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe f9f2 	bl	8002090 <HAL_InitTick>

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3710      	adds	r7, #16
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40022000 	.word	0x40022000
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	0800541c 	.word	0x0800541c
 8003cc4:	20000000 	.word	0x20000000
 8003cc8:	20000004 	.word	0x20000004

08003ccc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	; 0x28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8003cd8:	f107 0318 	add.w	r3, r7, #24
 8003cdc:	2200      	movs	r2, #0
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	605a      	str	r2, [r3, #4]
 8003ce2:	609a      	str	r2, [r3, #8]
 8003ce4:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003cea:	2303      	movs	r3, #3
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8003cf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cf6:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8003cf8:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <HAL_RCC_MCOConfig+0x68>)
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	4a0d      	ldr	r2, [pc, #52]	; (8003d34 <HAL_RCC_MCOConfig+0x68>)
 8003cfe:	f043 0304 	orr.w	r3, r3, #4
 8003d02:	6193      	str	r3, [r2, #24]
 8003d04:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <HAL_RCC_MCOConfig+0x68>)
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8003d10:	f107 0318 	add.w	r3, r7, #24
 8003d14:	4619      	mov	r1, r3
 8003d16:	4808      	ldr	r0, [pc, #32]	; (8003d38 <HAL_RCC_MCOConfig+0x6c>)
 8003d18:	f7ff fa88 	bl	800322c <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <HAL_RCC_MCOConfig+0x68>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003d24:	4903      	ldr	r1, [pc, #12]	; (8003d34 <HAL_RCC_MCOConfig+0x68>)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	604b      	str	r3, [r1, #4]
}
 8003d2c:	bf00      	nop
 8003d2e:	3728      	adds	r7, #40	; 0x28
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40010800 	.word	0x40010800

08003d3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	2300      	movs	r3, #0
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d56:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d002      	beq.n	8003d6c <HAL_RCC_GetSysClockFreq+0x30>
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d003      	beq.n	8003d72 <HAL_RCC_GetSysClockFreq+0x36>
 8003d6a:	e027      	b.n	8003dbc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d6c:	4b19      	ldr	r3, [pc, #100]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d6e:	613b      	str	r3, [r7, #16]
      break;
 8003d70:	e027      	b.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	0c9b      	lsrs	r3, r3, #18
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	4a17      	ldr	r2, [pc, #92]	; (8003dd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003d7c:	5cd3      	ldrb	r3, [r2, r3]
 8003d7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d010      	beq.n	8003dac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d8a:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	0c5b      	lsrs	r3, r3, #17
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	4a11      	ldr	r2, [pc, #68]	; (8003ddc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d96:	5cd3      	ldrb	r3, [r2, r3]
 8003d98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a0d      	ldr	r2, [pc, #52]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d9e:	fb03 f202 	mul.w	r2, r3, r2
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	e004      	b.n	8003db6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a0c      	ldr	r2, [pc, #48]	; (8003de0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003db0:	fb02 f303 	mul.w	r3, r2, r3
 8003db4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	613b      	str	r3, [r7, #16]
      break;
 8003dba:	e002      	b.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003dbc:	4b05      	ldr	r3, [pc, #20]	; (8003dd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dbe:	613b      	str	r3, [r7, #16]
      break;
 8003dc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dc2:	693b      	ldr	r3, [r7, #16]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	371c      	adds	r7, #28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	007a1200 	.word	0x007a1200
 8003dd8:	08005430 	.word	0x08005430
 8003ddc:	08005440 	.word	0x08005440
 8003de0:	003d0900 	.word	0x003d0900

08003de4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003de8:	4b02      	ldr	r3, [pc, #8]	; (8003df4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dea:	681b      	ldr	r3, [r3, #0]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr
 8003df4:	20000000 	.word	0x20000000

08003df8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e00:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <RCC_Delay+0x34>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a0a      	ldr	r2, [pc, #40]	; (8003e30 <RCC_Delay+0x38>)
 8003e06:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0a:	0a5b      	lsrs	r3, r3, #9
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	fb02 f303 	mul.w	r3, r2, r3
 8003e12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e14:	bf00      	nop
  }
  while (Delay --);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	1e5a      	subs	r2, r3, #1
 8003e1a:	60fa      	str	r2, [r7, #12]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f9      	bne.n	8003e14 <RCC_Delay+0x1c>
}
 8003e20:	bf00      	nop
 8003e22:	bf00      	nop
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr
 8003e2c:	20000000 	.word	0x20000000
 8003e30:	10624dd3 	.word	0x10624dd3

08003e34 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d07d      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e50:	2300      	movs	r3, #0
 8003e52:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e54:	4b4f      	ldr	r3, [pc, #316]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10d      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e60:	4b4c      	ldr	r3, [pc, #304]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	4a4b      	ldr	r2, [pc, #300]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	61d3      	str	r3, [r2, #28]
 8003e6c:	4b49      	ldr	r3, [pc, #292]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7c:	4b46      	ldr	r3, [pc, #280]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d118      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e88:	4b43      	ldr	r3, [pc, #268]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a42      	ldr	r2, [pc, #264]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e94:	f7fe f93e 	bl	8002114 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9a:	e008      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9c:	f7fe f93a 	bl	8002114 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b64      	cmp	r3, #100	; 0x64
 8003ea8:	d901      	bls.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e06d      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eae:	4b3a      	ldr	r3, [pc, #232]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003eba:	4b36      	ldr	r3, [pc, #216]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d02e      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d027      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ed8:	4b2e      	ldr	r3, [pc, #184]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ee2:	4b2e      	ldr	r3, [pc, #184]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ee8:	4b2c      	ldr	r3, [pc, #176]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003eee:	4a29      	ldr	r2, [pc, #164]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d014      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efe:	f7fe f909 	bl	8002114 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f04:	e00a      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f06:	f7fe f905 	bl	8002114 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e036      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1c:	4b1d      	ldr	r3, [pc, #116]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0ee      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f28:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	4917      	ldr	r1, [pc, #92]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d105      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f40:	4b14      	ldr	r3, [pc, #80]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	4a13      	ldr	r2, [pc, #76]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d008      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f58:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	490b      	ldr	r1, [pc, #44]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0310 	and.w	r3, r3, #16
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d008      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f76:	4b07      	ldr	r3, [pc, #28]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	4904      	ldr	r1, [pc, #16]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40021000 	.word	0x40021000
 8003f98:	40007000 	.word	0x40007000
 8003f9c:	42420440 	.word	0x42420440

08003fa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e076      	b.n	80040a0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d108      	bne.n	8003fcc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fc2:	d009      	beq.n	8003fd8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	61da      	str	r2, [r3, #28]
 8003fca:	e005      	b.n	8003fd8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fc fec0 	bl	8000d78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800400e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405c:	ea42 0103 	orr.w	r1, r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	0c1a      	lsrs	r2, r3, #16
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f002 0204 	and.w	r2, r2, #4
 800407e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69da      	ldr	r2, [r3, #28]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800408e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d002      	beq.n	80040ce <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80040c8:	2302      	movs	r3, #2
 80040ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040cc:	e0fb      	b.n	80042c6 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040d6:	d112      	bne.n	80040fe <HAL_SPI_Receive+0x56>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10e      	bne.n	80040fe <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2204      	movs	r2, #4
 80040e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80040e8:	88fa      	ldrh	r2, [r7, #6]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	4613      	mov	r3, r2
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f8ef 	bl	80042d8 <HAL_SPI_TransmitReceive>
 80040fa:	4603      	mov	r3, r0
 80040fc:	e0e8      	b.n	80042d0 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_SPI_Receive+0x64>
 8004108:	2302      	movs	r3, #2
 800410a:	e0e1      	b.n	80042d0 <HAL_SPI_Receive+0x228>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004114:	f7fd fffe 	bl	8002114 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <HAL_SPI_Receive+0x7e>
 8004120:	88fb      	ldrh	r3, [r7, #6]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d102      	bne.n	800412c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	75fb      	strb	r3, [r7, #23]
    goto error;
 800412a:	e0cc      	b.n	80042c6 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2204      	movs	r2, #4
 8004130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	88fa      	ldrh	r2, [r7, #6]
 8004144:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	88fa      	ldrh	r2, [r7, #6]
 800414a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004172:	d10f      	bne.n	8004194 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004182:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004192:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419e:	2b40      	cmp	r3, #64	; 0x40
 80041a0:	d007      	beq.n	80041b2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d16a      	bne.n	8004290 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80041ba:	e032      	b.n	8004222 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d115      	bne.n	80041f6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f103 020c 	add.w	r2, r3, #12
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d6:	7812      	ldrb	r2, [r2, #0]
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	3b01      	subs	r3, #1
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80041f4:	e015      	b.n	8004222 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041f6:	f7fd ff8d 	bl	8002114 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	683a      	ldr	r2, [r7, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d803      	bhi.n	800420e <HAL_SPI_Receive+0x166>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420c:	d102      	bne.n	8004214 <HAL_SPI_Receive+0x16c>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d106      	bne.n	8004222 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004220:	e051      	b.n	80042c6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1c7      	bne.n	80041bc <HAL_SPI_Receive+0x114>
 800422c:	e035      	b.n	800429a <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b01      	cmp	r3, #1
 800423a:	d113      	bne.n	8004264 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	b292      	uxth	r2, r2
 8004248:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424e:	1c9a      	adds	r2, r3, #2
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004258:	b29b      	uxth	r3, r3
 800425a:	3b01      	subs	r3, #1
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004262:	e015      	b.n	8004290 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004264:	f7fd ff56 	bl	8002114 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d803      	bhi.n	800427c <HAL_SPI_Receive+0x1d4>
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427a:	d102      	bne.n	8004282 <HAL_SPI_Receive+0x1da>
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d106      	bne.n	8004290 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800428e:	e01a      	b.n	80042c6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004294:	b29b      	uxth	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1c9      	bne.n	800422e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	6839      	ldr	r1, [r7, #0]
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 fb56 	bl	8004950 <SPI_EndRxTransaction>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2220      	movs	r2, #32
 80042ae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	75fb      	strb	r3, [r7, #23]
 80042bc:	e003      	b.n	80042c6 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08c      	sub	sp, #48	; 0x30
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80042e6:	2301      	movs	r3, #1
 80042e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d101      	bne.n	80042fe <HAL_SPI_TransmitReceive+0x26>
 80042fa:	2302      	movs	r3, #2
 80042fc:	e198      	b.n	8004630 <HAL_SPI_TransmitReceive+0x358>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004306:	f7fd ff05 	bl	8002114 <HAL_GetTick>
 800430a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004312:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800431c:	887b      	ldrh	r3, [r7, #2]
 800431e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004320:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004324:	2b01      	cmp	r3, #1
 8004326:	d00f      	beq.n	8004348 <HAL_SPI_TransmitReceive+0x70>
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800432e:	d107      	bne.n	8004340 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d103      	bne.n	8004340 <HAL_SPI_TransmitReceive+0x68>
 8004338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800433c:	2b04      	cmp	r3, #4
 800433e:	d003      	beq.n	8004348 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004340:	2302      	movs	r3, #2
 8004342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004346:	e16d      	b.n	8004624 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d005      	beq.n	800435a <HAL_SPI_TransmitReceive+0x82>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <HAL_SPI_TransmitReceive+0x82>
 8004354:	887b      	ldrh	r3, [r7, #2]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d103      	bne.n	8004362 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004360:	e160      	b.n	8004624 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b04      	cmp	r3, #4
 800436c:	d003      	beq.n	8004376 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2205      	movs	r2, #5
 8004372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	887a      	ldrh	r2, [r7, #2]
 8004386:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	887a      	ldrh	r2, [r7, #2]
 800438c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	68ba      	ldr	r2, [r7, #8]
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	887a      	ldrh	r2, [r7, #2]
 8004398:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	887a      	ldrh	r2, [r7, #2]
 800439e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043b6:	2b40      	cmp	r3, #64	; 0x40
 80043b8:	d007      	beq.n	80043ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043d2:	d17c      	bne.n	80044ce <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <HAL_SPI_TransmitReceive+0x10a>
 80043dc:	8b7b      	ldrh	r3, [r7, #26]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d16a      	bne.n	80044b8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	881a      	ldrh	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	1c9a      	adds	r2, r3, #2
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004406:	e057      	b.n	80044b8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b02      	cmp	r3, #2
 8004414:	d11b      	bne.n	800444e <HAL_SPI_TransmitReceive+0x176>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d016      	beq.n	800444e <HAL_SPI_TransmitReceive+0x176>
 8004420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004422:	2b01      	cmp	r3, #1
 8004424:	d113      	bne.n	800444e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	881a      	ldrh	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	1c9a      	adds	r2, r3, #2
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f003 0301 	and.w	r3, r3, #1
 8004458:	2b01      	cmp	r3, #1
 800445a:	d119      	bne.n	8004490 <HAL_SPI_TransmitReceive+0x1b8>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d014      	beq.n	8004490 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004470:	b292      	uxth	r2, r2
 8004472:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	1c9a      	adds	r2, r3, #2
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800448c:	2301      	movs	r3, #1
 800448e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004490:	f7fd fe40 	bl	8002114 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800449c:	429a      	cmp	r2, r3
 800449e:	d80b      	bhi.n	80044b8 <HAL_SPI_TransmitReceive+0x1e0>
 80044a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a6:	d007      	beq.n	80044b8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80044b6:	e0b5      	b.n	8004624 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1a2      	bne.n	8004408 <HAL_SPI_TransmitReceive+0x130>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d19d      	bne.n	8004408 <HAL_SPI_TransmitReceive+0x130>
 80044cc:	e080      	b.n	80045d0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <HAL_SPI_TransmitReceive+0x204>
 80044d6:	8b7b      	ldrh	r3, [r7, #26]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d16f      	bne.n	80045bc <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	330c      	adds	r3, #12
 80044e6:	7812      	ldrb	r2, [r2, #0]
 80044e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004502:	e05b      	b.n	80045bc <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b02      	cmp	r3, #2
 8004510:	d11c      	bne.n	800454c <HAL_SPI_TransmitReceive+0x274>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d017      	beq.n	800454c <HAL_SPI_TransmitReceive+0x274>
 800451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451e:	2b01      	cmp	r3, #1
 8004520:	d114      	bne.n	800454c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	330c      	adds	r3, #12
 800452c:	7812      	ldrb	r2, [r2, #0]
 800452e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b01      	cmp	r3, #1
 8004558:	d119      	bne.n	800458e <HAL_SPI_TransmitReceive+0x2b6>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800455e:	b29b      	uxth	r3, r3
 8004560:	2b00      	cmp	r3, #0
 8004562:	d014      	beq.n	800458e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68da      	ldr	r2, [r3, #12]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004576:	1c5a      	adds	r2, r3, #1
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b01      	subs	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800458a:	2301      	movs	r3, #1
 800458c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800458e:	f7fd fdc1 	bl	8002114 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800459a:	429a      	cmp	r2, r3
 800459c:	d803      	bhi.n	80045a6 <HAL_SPI_TransmitReceive+0x2ce>
 800459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a4:	d102      	bne.n	80045ac <HAL_SPI_TransmitReceive+0x2d4>
 80045a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d107      	bne.n	80045bc <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80045ba:	e033      	b.n	8004624 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d19e      	bne.n	8004504 <HAL_SPI_TransmitReceive+0x22c>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d199      	bne.n	8004504 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f000 fa0d 	bl	80049f4 <SPI_EndRxTxTransaction>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d006      	beq.n	80045ee <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80045ec:	e01a      	b.n	8004624 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10a      	bne.n	800460c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800461a:	e003      	b.n	8004624 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800462c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004630:	4618      	mov	r0, r3
 8004632:	3730      	adds	r7, #48	; 0x30
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b088      	sub	sp, #32
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	099b      	lsrs	r3, r3, #6
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10f      	bne.n	800467c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004662:	2b00      	cmp	r3, #0
 8004664:	d00a      	beq.n	800467c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	099b      	lsrs	r3, r3, #6
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d004      	beq.n	800467c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	4798      	blx	r3
    return;
 800467a:	e0be      	b.n	80047fa <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	085b      	lsrs	r3, r3, #1
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <HAL_SPI_IRQHandler+0x66>
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	09db      	lsrs	r3, r3, #7
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d004      	beq.n	800469e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	4798      	blx	r3
    return;
 800469c:	e0ad      	b.n	80047fa <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	095b      	lsrs	r3, r3, #5
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <HAL_SPI_IRQHandler+0x80>
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	099b      	lsrs	r3, r3, #6
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 80a1 	beq.w	80047fa <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	f003 0301 	and.w	r3, r3, #1
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 809a 	beq.w	80047fa <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80046c6:	69bb      	ldr	r3, [r7, #24]
 80046c8:	099b      	lsrs	r3, r3, #6
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d023      	beq.n	800471a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d011      	beq.n	8004702 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e2:	f043 0204 	orr.w	r2, r3, #4
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046ea:	2300      	movs	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	e00b      	b.n	800471a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004702:	2300      	movs	r3, #0
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	693b      	ldr	r3, [r7, #16]
        return;
 8004718:	e06f      	b.n	80047fa <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	095b      	lsrs	r3, r3, #5
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d014      	beq.n	8004750 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472a:	f043 0201 	orr.w	r2, r3, #1
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004732:	2300      	movs	r3, #0
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004754:	2b00      	cmp	r3, #0
 8004756:	d04f      	beq.n	80047f8 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004766:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d104      	bne.n	8004784 <HAL_SPI_IRQHandler+0x14c>
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b00      	cmp	r3, #0
 8004782:	d034      	beq.n	80047ee <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0203 	bic.w	r2, r2, #3
 8004792:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004798:	2b00      	cmp	r3, #0
 800479a:	d011      	beq.n	80047c0 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a0:	4a17      	ldr	r2, [pc, #92]	; (8004800 <HAL_SPI_IRQHandler+0x1c8>)
 80047a2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fe fcc7 	bl	800313c <HAL_DMA_Abort_IT>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d005      	beq.n	80047c0 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d016      	beq.n	80047f6 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047cc:	4a0c      	ldr	r2, [pc, #48]	; (8004800 <HAL_SPI_IRQHandler+0x1c8>)
 80047ce:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fe fcb1 	bl	800313c <HAL_DMA_Abort_IT>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80047ec:	e003      	b.n	80047f6 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f808 	bl	8004804 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80047f4:	e000      	b.n	80047f8 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80047f6:	bf00      	nop
    return;
 80047f8:	bf00      	nop
  }
}
 80047fa:	3720      	adds	r7, #32
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	08004817 	.word	0x08004817

08004804 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr

08004816 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f7ff ffe7 	bl	8004804 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004836:	bf00      	nop
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
	...

08004840 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	4613      	mov	r3, r2
 800484e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004850:	f7fd fc60 	bl	8002114 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004858:	1a9b      	subs	r3, r3, r2
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	4413      	add	r3, r2
 800485e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004860:	f7fd fc58 	bl	8002114 <HAL_GetTick>
 8004864:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004866:	4b39      	ldr	r3, [pc, #228]	; (800494c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	015b      	lsls	r3, r3, #5
 800486c:	0d1b      	lsrs	r3, r3, #20
 800486e:	69fa      	ldr	r2, [r7, #28]
 8004870:	fb02 f303 	mul.w	r3, r2, r3
 8004874:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004876:	e054      	b.n	8004922 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487e:	d050      	beq.n	8004922 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004880:	f7fd fc48 	bl	8002114 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	69fa      	ldr	r2, [r7, #28]
 800488c:	429a      	cmp	r2, r3
 800488e:	d902      	bls.n	8004896 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d13d      	bne.n	8004912 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048ae:	d111      	bne.n	80048d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b8:	d004      	beq.n	80048c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c2:	d107      	bne.n	80048d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048dc:	d10f      	bne.n	80048fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e017      	b.n	8004942 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	3b01      	subs	r3, #1
 8004920:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	4013      	ands	r3, r2
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	429a      	cmp	r2, r3
 8004930:	bf0c      	ite	eq
 8004932:	2301      	moveq	r3, #1
 8004934:	2300      	movne	r3, #0
 8004936:	b2db      	uxtb	r3, r3
 8004938:	461a      	mov	r2, r3
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	429a      	cmp	r2, r3
 800493e:	d19b      	bne.n	8004878 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3720      	adds	r7, #32
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20000000 	.word	0x20000000

08004950 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af02      	add	r7, sp, #8
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004964:	d111      	bne.n	800498a <SPI_EndRxTransaction+0x3a>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800496e:	d004      	beq.n	800497a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004978:	d107      	bne.n	800498a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004988:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004992:	d117      	bne.n	80049c4 <SPI_EndRxTransaction+0x74>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800499c:	d112      	bne.n	80049c4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2200      	movs	r2, #0
 80049a6:	2101      	movs	r1, #1
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f7ff ff49 	bl	8004840 <SPI_WaitFlagStateUntilTimeout>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d01a      	beq.n	80049ea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b8:	f043 0220 	orr.w	r2, r3, #32
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e013      	b.n	80049ec <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2200      	movs	r2, #0
 80049cc:	2180      	movs	r1, #128	; 0x80
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f7ff ff36 	bl	8004840 <SPI_WaitFlagStateUntilTimeout>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d007      	beq.n	80049ea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049de:	f043 0220 	orr.w	r2, r3, #32
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e000      	b.n	80049ec <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2200      	movs	r2, #0
 8004a08:	2180      	movs	r1, #128	; 0x80
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f7ff ff18 	bl	8004840 <SPI_WaitFlagStateUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1a:	f043 0220 	orr.w	r2, r3, #32
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e000      	b.n	8004a28 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e041      	b.n	8004ac6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7fc faf4 	bl	8001044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3304      	adds	r3, #4
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	f000 fa74 	bl	8004f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
	...

08004ad0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d001      	beq.n	8004ae8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e03a      	b.n	8004b5e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0201 	orr.w	r2, r2, #1
 8004afe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a18      	ldr	r2, [pc, #96]	; (8004b68 <HAL_TIM_Base_Start_IT+0x98>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00e      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x58>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b12:	d009      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x58>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a14      	ldr	r2, [pc, #80]	; (8004b6c <HAL_TIM_Base_Start_IT+0x9c>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d004      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0x58>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a13      	ldr	r2, [pc, #76]	; (8004b70 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d111      	bne.n	8004b4c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2b06      	cmp	r3, #6
 8004b38:	d010      	beq.n	8004b5c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f042 0201 	orr.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4a:	e007      	b.n	8004b5c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr
 8004b68:	40012c00 	.word	0x40012c00
 8004b6c:	40000400 	.word	0x40000400
 8004b70:	40000800 	.word	0x40000800

08004b74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d122      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f003 0302 	and.w	r3, r3, #2
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d11b      	bne.n	8004bd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0202 	mvn.w	r2, #2
 8004ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d003      	beq.n	8004bbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f9b4 	bl	8004f24 <HAL_TIM_IC_CaptureCallback>
 8004bbc:	e005      	b.n	8004bca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f9a7 	bl	8004f12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 f9b6 	bl	8004f36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d122      	bne.n	8004c24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d11b      	bne.n	8004c24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0204 	mvn.w	r2, #4
 8004bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f98a 	bl	8004f24 <HAL_TIM_IC_CaptureCallback>
 8004c10:	e005      	b.n	8004c1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f97d 	bl	8004f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f98c 	bl	8004f36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0308 	and.w	r3, r3, #8
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d122      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d11b      	bne.n	8004c78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0208 	mvn.w	r2, #8
 8004c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f960 	bl	8004f24 <HAL_TIM_IC_CaptureCallback>
 8004c64:	e005      	b.n	8004c72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f953 	bl	8004f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f962 	bl	8004f36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b10      	cmp	r3, #16
 8004c84:	d122      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f003 0310 	and.w	r3, r3, #16
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d11b      	bne.n	8004ccc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f06f 0210 	mvn.w	r2, #16
 8004c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2208      	movs	r2, #8
 8004ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f936 	bl	8004f24 <HAL_TIM_IC_CaptureCallback>
 8004cb8:	e005      	b.n	8004cc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f929 	bl	8004f12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 f938 	bl	8004f36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d10e      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f003 0301 	and.w	r3, r3, #1
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d107      	bne.n	8004cf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f06f 0201 	mvn.w	r2, #1
 8004cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7fb ffec 	bl	8000cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d02:	2b80      	cmp	r3, #128	; 0x80
 8004d04:	d10e      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d10:	2b80      	cmp	r3, #128	; 0x80
 8004d12:	d107      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fa7b 	bl	800521a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2e:	2b40      	cmp	r3, #64	; 0x40
 8004d30:	d10e      	bne.n	8004d50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3c:	2b40      	cmp	r3, #64	; 0x40
 8004d3e:	d107      	bne.n	8004d50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f8fc 	bl	8004f48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	d10e      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b20      	cmp	r3, #32
 8004d6a:	d107      	bne.n	8004d7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0220 	mvn.w	r2, #32
 8004d74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fa46 	bl	8005208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d7c:	bf00      	nop
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_TIM_ConfigClockSource+0x1c>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e0b4      	b.n	8004f0a <HAL_TIM_ConfigClockSource+0x186>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd8:	d03e      	beq.n	8004e58 <HAL_TIM_ConfigClockSource+0xd4>
 8004dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dde:	f200 8087 	bhi.w	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de6:	f000 8086 	beq.w	8004ef6 <HAL_TIM_ConfigClockSource+0x172>
 8004dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dee:	d87f      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004df0:	2b70      	cmp	r3, #112	; 0x70
 8004df2:	d01a      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0xa6>
 8004df4:	2b70      	cmp	r3, #112	; 0x70
 8004df6:	d87b      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004df8:	2b60      	cmp	r3, #96	; 0x60
 8004dfa:	d050      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x11a>
 8004dfc:	2b60      	cmp	r3, #96	; 0x60
 8004dfe:	d877      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004e00:	2b50      	cmp	r3, #80	; 0x50
 8004e02:	d03c      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0xfa>
 8004e04:	2b50      	cmp	r3, #80	; 0x50
 8004e06:	d873      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004e08:	2b40      	cmp	r3, #64	; 0x40
 8004e0a:	d058      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0x13a>
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	d86f      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004e10:	2b30      	cmp	r3, #48	; 0x30
 8004e12:	d064      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x15a>
 8004e14:	2b30      	cmp	r3, #48	; 0x30
 8004e16:	d86b      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d060      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x15a>
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d867      	bhi.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d05c      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x15a>
 8004e24:	2b10      	cmp	r3, #16
 8004e26:	d05a      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x15a>
 8004e28:	e062      	b.n	8004ef0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6818      	ldr	r0, [r3, #0]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	6899      	ldr	r1, [r3, #8]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f000 f968 	bl	800510e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	609a      	str	r2, [r3, #8]
      break;
 8004e56:	e04f      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	6899      	ldr	r1, [r3, #8]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f000 f951 	bl	800510e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	689a      	ldr	r2, [r3, #8]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e7a:	609a      	str	r2, [r3, #8]
      break;
 8004e7c:	e03c      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6859      	ldr	r1, [r3, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f000 f8c8 	bl	8005020 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2150      	movs	r1, #80	; 0x50
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 f91f 	bl	80050da <TIM_ITRx_SetConfig>
      break;
 8004e9c:	e02c      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	6859      	ldr	r1, [r3, #4]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f000 f8e6 	bl	800507c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2160      	movs	r1, #96	; 0x60
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 f90f 	bl	80050da <TIM_ITRx_SetConfig>
      break;
 8004ebc:	e01c      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6818      	ldr	r0, [r3, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6859      	ldr	r1, [r3, #4]
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f000 f8a8 	bl	8005020 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2140      	movs	r1, #64	; 0x40
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 f8ff 	bl	80050da <TIM_ITRx_SetConfig>
      break;
 8004edc:	e00c      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4610      	mov	r0, r2
 8004eea:	f000 f8f6 	bl	80050da <TIM_ITRx_SetConfig>
      break;
 8004eee:	e003      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef4:	e000      	b.n	8004ef8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ef6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bc80      	pop	{r7}
 8004f34:	4770      	bx	lr

08004f36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f3e:	bf00      	nop
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bc80      	pop	{r7}
 8004f46:	4770      	bx	lr

08004f48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr
	...

08004f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a29      	ldr	r2, [pc, #164]	; (8005014 <TIM_Base_SetConfig+0xb8>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00b      	beq.n	8004f8c <TIM_Base_SetConfig+0x30>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f7a:	d007      	beq.n	8004f8c <TIM_Base_SetConfig+0x30>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a26      	ldr	r2, [pc, #152]	; (8005018 <TIM_Base_SetConfig+0xbc>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_Base_SetConfig+0x30>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a25      	ldr	r2, [pc, #148]	; (800501c <TIM_Base_SetConfig+0xc0>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d108      	bne.n	8004f9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a1c      	ldr	r2, [pc, #112]	; (8005014 <TIM_Base_SetConfig+0xb8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00b      	beq.n	8004fbe <TIM_Base_SetConfig+0x62>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fac:	d007      	beq.n	8004fbe <TIM_Base_SetConfig+0x62>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a19      	ldr	r2, [pc, #100]	; (8005018 <TIM_Base_SetConfig+0xbc>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d003      	beq.n	8004fbe <TIM_Base_SetConfig+0x62>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a18      	ldr	r2, [pc, #96]	; (800501c <TIM_Base_SetConfig+0xc0>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d108      	bne.n	8004fd0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a07      	ldr	r2, [pc, #28]	; (8005014 <TIM_Base_SetConfig+0xb8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d103      	bne.n	8005004 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	615a      	str	r2, [r3, #20]
}
 800500a:	bf00      	nop
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr
 8005014:	40012c00 	.word	0x40012c00
 8005018:	40000400 	.word	0x40000400
 800501c:	40000800 	.word	0x40000800

08005020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6a1b      	ldr	r3, [r3, #32]
 8005030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f023 0201 	bic.w	r2, r3, #1
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800504a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f023 030a 	bic.w	r3, r3, #10
 800505c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4313      	orrs	r3, r2
 8005064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	621a      	str	r2, [r3, #32]
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr

0800507c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	f023 0210 	bic.w	r2, r3, #16
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	031b      	lsls	r3, r3, #12
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	011b      	lsls	r3, r3, #4
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	621a      	str	r2, [r3, #32]
}
 80050d0:	bf00      	nop
 80050d2:	371c      	adds	r7, #28
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr

080050da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050da:	b480      	push	{r7}
 80050dc:	b085      	sub	sp, #20
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
 80050e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f043 0307 	orr.w	r3, r3, #7
 80050fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	609a      	str	r2, [r3, #8]
}
 8005104:	bf00      	nop
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	bc80      	pop	{r7}
 800510c:	4770      	bx	lr

0800510e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800510e:	b480      	push	{r7}
 8005110:	b087      	sub	sp, #28
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
 800511a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005128:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	021a      	lsls	r2, r3, #8
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	431a      	orrs	r2, r3
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	4313      	orrs	r3, r2
 8005136:	697a      	ldr	r2, [r7, #20]
 8005138:	4313      	orrs	r3, r2
 800513a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	609a      	str	r2, [r3, #8]
}
 8005142:	bf00      	nop
 8005144:	371c      	adds	r7, #28
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr

0800514c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005160:	2302      	movs	r3, #2
 8005162:	e046      	b.n	80051f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a16      	ldr	r2, [pc, #88]	; (80051fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d00e      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b0:	d009      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a12      	ldr	r2, [pc, #72]	; (8005200 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d004      	beq.n	80051c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a10      	ldr	r2, [pc, #64]	; (8005204 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d10c      	bne.n	80051e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bc80      	pop	{r7}
 80051fa:	4770      	bx	lr
 80051fc:	40012c00 	.word	0x40012c00
 8005200:	40000400 	.word	0x40000400
 8005204:	40000800 	.word	0x40000800

08005208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005208:	b480      	push	{r7}
 800520a:	b083      	sub	sp, #12
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr

0800521a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800521a:	b480      	push	{r7}
 800521c:	b083      	sub	sp, #12
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr

0800522c <__errno>:
 800522c:	4b01      	ldr	r3, [pc, #4]	; (8005234 <__errno+0x8>)
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	2000000c 	.word	0x2000000c

08005238 <__libc_init_array>:
 8005238:	b570      	push	{r4, r5, r6, lr}
 800523a:	2600      	movs	r6, #0
 800523c:	4d0c      	ldr	r5, [pc, #48]	; (8005270 <__libc_init_array+0x38>)
 800523e:	4c0d      	ldr	r4, [pc, #52]	; (8005274 <__libc_init_array+0x3c>)
 8005240:	1b64      	subs	r4, r4, r5
 8005242:	10a4      	asrs	r4, r4, #2
 8005244:	42a6      	cmp	r6, r4
 8005246:	d109      	bne.n	800525c <__libc_init_array+0x24>
 8005248:	f000 f8dc 	bl	8005404 <_init>
 800524c:	2600      	movs	r6, #0
 800524e:	4d0a      	ldr	r5, [pc, #40]	; (8005278 <__libc_init_array+0x40>)
 8005250:	4c0a      	ldr	r4, [pc, #40]	; (800527c <__libc_init_array+0x44>)
 8005252:	1b64      	subs	r4, r4, r5
 8005254:	10a4      	asrs	r4, r4, #2
 8005256:	42a6      	cmp	r6, r4
 8005258:	d105      	bne.n	8005266 <__libc_init_array+0x2e>
 800525a:	bd70      	pop	{r4, r5, r6, pc}
 800525c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005260:	4798      	blx	r3
 8005262:	3601      	adds	r6, #1
 8005264:	e7ee      	b.n	8005244 <__libc_init_array+0xc>
 8005266:	f855 3b04 	ldr.w	r3, [r5], #4
 800526a:	4798      	blx	r3
 800526c:	3601      	adds	r6, #1
 800526e:	e7f2      	b.n	8005256 <__libc_init_array+0x1e>
 8005270:	08005444 	.word	0x08005444
 8005274:	08005444 	.word	0x08005444
 8005278:	08005444 	.word	0x08005444
 800527c:	08005448 	.word	0x08005448

08005280 <malloc>:
 8005280:	4b02      	ldr	r3, [pc, #8]	; (800528c <malloc+0xc>)
 8005282:	4601      	mov	r1, r0
 8005284:	6818      	ldr	r0, [r3, #0]
 8005286:	f000 b82b 	b.w	80052e0 <_malloc_r>
 800528a:	bf00      	nop
 800528c:	2000000c 	.word	0x2000000c

08005290 <memset>:
 8005290:	4603      	mov	r3, r0
 8005292:	4402      	add	r2, r0
 8005294:	4293      	cmp	r3, r2
 8005296:	d100      	bne.n	800529a <memset+0xa>
 8005298:	4770      	bx	lr
 800529a:	f803 1b01 	strb.w	r1, [r3], #1
 800529e:	e7f9      	b.n	8005294 <memset+0x4>

080052a0 <sbrk_aligned>:
 80052a0:	b570      	push	{r4, r5, r6, lr}
 80052a2:	4e0e      	ldr	r6, [pc, #56]	; (80052dc <sbrk_aligned+0x3c>)
 80052a4:	460c      	mov	r4, r1
 80052a6:	6831      	ldr	r1, [r6, #0]
 80052a8:	4605      	mov	r5, r0
 80052aa:	b911      	cbnz	r1, 80052b2 <sbrk_aligned+0x12>
 80052ac:	f000 f88c 	bl	80053c8 <_sbrk_r>
 80052b0:	6030      	str	r0, [r6, #0]
 80052b2:	4621      	mov	r1, r4
 80052b4:	4628      	mov	r0, r5
 80052b6:	f000 f887 	bl	80053c8 <_sbrk_r>
 80052ba:	1c43      	adds	r3, r0, #1
 80052bc:	d00a      	beq.n	80052d4 <sbrk_aligned+0x34>
 80052be:	1cc4      	adds	r4, r0, #3
 80052c0:	f024 0403 	bic.w	r4, r4, #3
 80052c4:	42a0      	cmp	r0, r4
 80052c6:	d007      	beq.n	80052d8 <sbrk_aligned+0x38>
 80052c8:	1a21      	subs	r1, r4, r0
 80052ca:	4628      	mov	r0, r5
 80052cc:	f000 f87c 	bl	80053c8 <_sbrk_r>
 80052d0:	3001      	adds	r0, #1
 80052d2:	d101      	bne.n	80052d8 <sbrk_aligned+0x38>
 80052d4:	f04f 34ff 	mov.w	r4, #4294967295
 80052d8:	4620      	mov	r0, r4
 80052da:	bd70      	pop	{r4, r5, r6, pc}
 80052dc:	20000228 	.word	0x20000228

080052e0 <_malloc_r>:
 80052e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052e4:	1ccd      	adds	r5, r1, #3
 80052e6:	f025 0503 	bic.w	r5, r5, #3
 80052ea:	3508      	adds	r5, #8
 80052ec:	2d0c      	cmp	r5, #12
 80052ee:	bf38      	it	cc
 80052f0:	250c      	movcc	r5, #12
 80052f2:	2d00      	cmp	r5, #0
 80052f4:	4607      	mov	r7, r0
 80052f6:	db01      	blt.n	80052fc <_malloc_r+0x1c>
 80052f8:	42a9      	cmp	r1, r5
 80052fa:	d905      	bls.n	8005308 <_malloc_r+0x28>
 80052fc:	230c      	movs	r3, #12
 80052fe:	2600      	movs	r6, #0
 8005300:	603b      	str	r3, [r7, #0]
 8005302:	4630      	mov	r0, r6
 8005304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005308:	4e2e      	ldr	r6, [pc, #184]	; (80053c4 <_malloc_r+0xe4>)
 800530a:	f000 f86d 	bl	80053e8 <__malloc_lock>
 800530e:	6833      	ldr	r3, [r6, #0]
 8005310:	461c      	mov	r4, r3
 8005312:	bb34      	cbnz	r4, 8005362 <_malloc_r+0x82>
 8005314:	4629      	mov	r1, r5
 8005316:	4638      	mov	r0, r7
 8005318:	f7ff ffc2 	bl	80052a0 <sbrk_aligned>
 800531c:	1c43      	adds	r3, r0, #1
 800531e:	4604      	mov	r4, r0
 8005320:	d14d      	bne.n	80053be <_malloc_r+0xde>
 8005322:	6834      	ldr	r4, [r6, #0]
 8005324:	4626      	mov	r6, r4
 8005326:	2e00      	cmp	r6, #0
 8005328:	d140      	bne.n	80053ac <_malloc_r+0xcc>
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	4631      	mov	r1, r6
 800532e:	4638      	mov	r0, r7
 8005330:	eb04 0803 	add.w	r8, r4, r3
 8005334:	f000 f848 	bl	80053c8 <_sbrk_r>
 8005338:	4580      	cmp	r8, r0
 800533a:	d13a      	bne.n	80053b2 <_malloc_r+0xd2>
 800533c:	6821      	ldr	r1, [r4, #0]
 800533e:	3503      	adds	r5, #3
 8005340:	1a6d      	subs	r5, r5, r1
 8005342:	f025 0503 	bic.w	r5, r5, #3
 8005346:	3508      	adds	r5, #8
 8005348:	2d0c      	cmp	r5, #12
 800534a:	bf38      	it	cc
 800534c:	250c      	movcc	r5, #12
 800534e:	4638      	mov	r0, r7
 8005350:	4629      	mov	r1, r5
 8005352:	f7ff ffa5 	bl	80052a0 <sbrk_aligned>
 8005356:	3001      	adds	r0, #1
 8005358:	d02b      	beq.n	80053b2 <_malloc_r+0xd2>
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	442b      	add	r3, r5
 800535e:	6023      	str	r3, [r4, #0]
 8005360:	e00e      	b.n	8005380 <_malloc_r+0xa0>
 8005362:	6822      	ldr	r2, [r4, #0]
 8005364:	1b52      	subs	r2, r2, r5
 8005366:	d41e      	bmi.n	80053a6 <_malloc_r+0xc6>
 8005368:	2a0b      	cmp	r2, #11
 800536a:	d916      	bls.n	800539a <_malloc_r+0xba>
 800536c:	1961      	adds	r1, r4, r5
 800536e:	42a3      	cmp	r3, r4
 8005370:	6025      	str	r5, [r4, #0]
 8005372:	bf18      	it	ne
 8005374:	6059      	strne	r1, [r3, #4]
 8005376:	6863      	ldr	r3, [r4, #4]
 8005378:	bf08      	it	eq
 800537a:	6031      	streq	r1, [r6, #0]
 800537c:	5162      	str	r2, [r4, r5]
 800537e:	604b      	str	r3, [r1, #4]
 8005380:	4638      	mov	r0, r7
 8005382:	f104 060b 	add.w	r6, r4, #11
 8005386:	f000 f835 	bl	80053f4 <__malloc_unlock>
 800538a:	f026 0607 	bic.w	r6, r6, #7
 800538e:	1d23      	adds	r3, r4, #4
 8005390:	1af2      	subs	r2, r6, r3
 8005392:	d0b6      	beq.n	8005302 <_malloc_r+0x22>
 8005394:	1b9b      	subs	r3, r3, r6
 8005396:	50a3      	str	r3, [r4, r2]
 8005398:	e7b3      	b.n	8005302 <_malloc_r+0x22>
 800539a:	6862      	ldr	r2, [r4, #4]
 800539c:	42a3      	cmp	r3, r4
 800539e:	bf0c      	ite	eq
 80053a0:	6032      	streq	r2, [r6, #0]
 80053a2:	605a      	strne	r2, [r3, #4]
 80053a4:	e7ec      	b.n	8005380 <_malloc_r+0xa0>
 80053a6:	4623      	mov	r3, r4
 80053a8:	6864      	ldr	r4, [r4, #4]
 80053aa:	e7b2      	b.n	8005312 <_malloc_r+0x32>
 80053ac:	4634      	mov	r4, r6
 80053ae:	6876      	ldr	r6, [r6, #4]
 80053b0:	e7b9      	b.n	8005326 <_malloc_r+0x46>
 80053b2:	230c      	movs	r3, #12
 80053b4:	4638      	mov	r0, r7
 80053b6:	603b      	str	r3, [r7, #0]
 80053b8:	f000 f81c 	bl	80053f4 <__malloc_unlock>
 80053bc:	e7a1      	b.n	8005302 <_malloc_r+0x22>
 80053be:	6025      	str	r5, [r4, #0]
 80053c0:	e7de      	b.n	8005380 <_malloc_r+0xa0>
 80053c2:	bf00      	nop
 80053c4:	20000224 	.word	0x20000224

080053c8 <_sbrk_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	2300      	movs	r3, #0
 80053cc:	4d05      	ldr	r5, [pc, #20]	; (80053e4 <_sbrk_r+0x1c>)
 80053ce:	4604      	mov	r4, r0
 80053d0:	4608      	mov	r0, r1
 80053d2:	602b      	str	r3, [r5, #0]
 80053d4:	f7fb fdac 	bl	8000f30 <_sbrk>
 80053d8:	1c43      	adds	r3, r0, #1
 80053da:	d102      	bne.n	80053e2 <_sbrk_r+0x1a>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	b103      	cbz	r3, 80053e2 <_sbrk_r+0x1a>
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	bd38      	pop	{r3, r4, r5, pc}
 80053e4:	2000022c 	.word	0x2000022c

080053e8 <__malloc_lock>:
 80053e8:	4801      	ldr	r0, [pc, #4]	; (80053f0 <__malloc_lock+0x8>)
 80053ea:	f000 b809 	b.w	8005400 <__retarget_lock_acquire_recursive>
 80053ee:	bf00      	nop
 80053f0:	20000230 	.word	0x20000230

080053f4 <__malloc_unlock>:
 80053f4:	4801      	ldr	r0, [pc, #4]	; (80053fc <__malloc_unlock+0x8>)
 80053f6:	f000 b804 	b.w	8005402 <__retarget_lock_release_recursive>
 80053fa:	bf00      	nop
 80053fc:	20000230 	.word	0x20000230

08005400 <__retarget_lock_acquire_recursive>:
 8005400:	4770      	bx	lr

08005402 <__retarget_lock_release_recursive>:
 8005402:	4770      	bx	lr

08005404 <_init>:
 8005404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005406:	bf00      	nop
 8005408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540a:	bc08      	pop	{r3}
 800540c:	469e      	mov	lr, r3
 800540e:	4770      	bx	lr

08005410 <_fini>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	bf00      	nop
 8005414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005416:	bc08      	pop	{r3}
 8005418:	469e      	mov	lr, r3
 800541a:	4770      	bx	lr
